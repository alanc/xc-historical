#define DoNormalLib NormalLibXdmcp
#define DoSharedLib SharedLibXdmcp
#define DoDebugLib DebugLibXdmcp
#define DoProfileLib ProfileLibXdmcp
#include <Library.tmpl>

XCOMM
XCOMM This library contains miscellaneous utility routines and is not part
XCOMM of the Xlib standard.
XCOMM

   INSTALLFLAGS = $(INSTINCFLAGS)
       LINTLIBS = $(LINTXLIB) 

#ifdef OsNameDefines
OS_NAME_DEFINES = OsNameDefines
#endif

#if HasDESLibrary
DESDEFS = -DHASDES
DESSRCS = Encrypt.c Decrypt.c Crypt.c
DESOBJS = Encrypt.o Decrypt.o Crypt.o
#endif

DEFINES = $(DESDEFS)

HEADERS = Xdmcp.h

SRCS = \
	A8Eq.c \
	AA8.c \
	AA16.c \
	AA32.c \
	AofA8.c \
	CA8.c \
	DA8.c \
	DA16.c \
	DA32.c \
	DAofA8.c \
	Fill.c \
	Flush.c \
	RA8.c \
	RA16.c \
	RA32.c \
	RAofA8.c \
	RC8.c \
	RC16.c \
	RC32.c \
	RHead.c \
	RR.c \
	RaA8.c \
	RaA16.c \
	RaA32.c \
	RaAoA8.c \
	WA8.c \
	WA16.c \
	WA32.c \
	WAofA8.c \
	WC8.c \
	WC16.c \
	WC32.c \
	Whead.c \
	Alloc.c \
	CmpKey.c \
	DecKey.c \
	GenKey.c \
	IncKey.c \
	$(DESSRCS)

OBJS = \
	A8Eq.o \
	AA8.o \
	AA16.o \
	AA32.o \
	AofA8.o \
	CA8.o \
	DA8.o \
	DA16.o \
	DA32.o \
	DAofA8.o \
	Fill.o \
	Flush.o \
	RA8.o \
	RA16.o \
	RA32.o \
	RAofA8.o \
	RC8.o \
	RC16.o \
	RC32.o \
	RHead.o \
	RR.o \
	RaA8.o \
	RaA16.o \
	RaA32.o \
	RaAoA8.o \
	WA8.o \
	WA16.o \
	WA32.o \
	WAofA8.o \
	WC8.o \
	WC16.o \
	WC32.o \
	Whead.o \
	Alloc.o \
	CmpKey.o \
	DecKey.o \
	GenKey.o \
	IncKey.o \
	$(DESOBJS)

LibraryObjectRule()

#if DoNormalLib
NormalLibraryTarget(Xdmcp,$(OBJS))
InstallLibrary(Xdmcp,$(USRLIBDIR))
#endif
#if DoProfileLib
ProfiledLibraryTarget(Xdmcp,$(OBJS))
InstallLibrary(Xdmcp_p,$(USRLIBDIR))
#endif
#if DoDebugLib
DebuggedLibraryTarget(Xdmcp,$(OBJS))
InstallLibrary(Xdmcp_g,$(USRLIBDIR))
#endif

LintLibraryTarget(Xdmcp,$(SRCS))
InstallLintLibrary(Xdmcp,$(LINTLIBDIR))

BuildIncludes($(HEADERS),.,.)

MakeDirectories(install,$(INCDIR))

InstallMultiple($(HEADERS),$(INCDIR))

DependTarget()

NormalLintTarget($(SRCS))

NormalProgramTarget(verify,verify.o,libXdmcp.a,libXdmcp.a, /**/)

saber_verify: verify.c $(SRCS)
	XCOMM load $(INCLUDES) $(DEFINES) verify.c $(SRCS)
