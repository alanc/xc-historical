.nr)S 12
.TH "Xsecurity" 1 "Release 5" "X Version 11"
.SH NAME
X Security \- X Display Access Control
.SH SYNOPSIS
.PP
X provides mechanism for implementing many access control systems.  Release
5 includes four mechanisms:
.nf
.br
.ta 1i 3i
	Host Access	Simple host-based access control.
	MIT-MAGIC-COOKIE-1	Shared plain-text "cookies".
	XDM-AUTHORIZATION-1	Secure DES based private-keys.
	SUN-DES-1	Based on Sun's secure rpc system.
.fi
.SH "ACCESS SYSTEM DESCRIPTIONS"
.IP "Host Access"
Any client on a host in the host access control list is allowed access to
the X server.  This system can work reasonably well in a trusting
environment, and is easy to use when the list of hosts used is small.  The
list of allowed hosts is stored in the X server and can be changed with the
xhost(1X) command.
.IP "MIT-MAGIC-COOKIE-1"
First distributed with release 4, MIT-MAGIC-COOKIE-1 sends a 128 bit "cookie"
along with the connection setup information.  If this "cookie" matches one
that the X server has, the connection is allowed access.  The users copy of
the "cookie" is stored in the disk file "~/.Xauthority".
.IP
There is nothing to prevent a network snooper from stealing the access key
and using it to gain access to the X server.  This system is useful in an
environment where many users are running applications on the same machine
and want to avoid interferance from each other; with the caveat that this
control is only as good as the access control to the physical network.
.IP "XDM-AUTHORIZATION-1"
For sites in the US, release 5 contains this DES based access control
mechanism.  It is similar in usage to MIT-MAGIC-COOKIE-1 in that the key is
stored in the .Xauthority file and is shared with the X server.  However,
this key consists of two parts - a 56 bit DES encryption key and 64 bits of
random data used as the authenticator.
.IP
When connecting to the X server, the application generates 192 bits of data
by combining the current time in seconds (since 00:00 1/1/1970 GMT) along
with 48 bits of "identifier" - for TCP/IP connections this is the address +
port number, for local connections this is the process ID and 32 bits of
"uniquifier" (in case multiple connections to the same server are made from
a single process).  This 192 bit packet is then encrypted and sent to the X
server which is able to verify if the requestor is authorized to connect.
This system is useful in many environments where host-based access control
is inappropriate and where network security cannot be ensured.
.IP "SUN-DES-1"
Recent versions of SunOS have included a public key based secure remote
procedure call system.  This system is based on the notion of a network
principal; a user name and NIS domain pair.  Using this system, the X server
can securely discover the actual user name of the requesting process.  It
involves encrypting data with the X servers public key, and so the identity
of the user who started the X server is needed for this; this identity is
stored in the .Xauthority file.  By extending the semantics of "host names"
to include this notion of network principal.  To allow access by a new user,
use xhost:
.nf
	xhost +user@nis-domain-name
	(e.g. xhost +keith@x.lcs.mit.edu)
.fi
Conversely, to restrict access from a user use xhost -user@nis-domain-name.
This system only works on machines which support Secure RPC; and only for
users which have set up the appropriate public/private key pairs on their
system.  See the SecureRPC documentation.
.SH "XDM AND AUTHORIZATION"
.SH "THE .Xauthority FILE"
.PP
Except for Host Access control, each of these systems uses data stored in
the .Xauthority file to generate the correct authoriation information to
pass along to the X server at connection setup.  MIT-MAGIC-COOKIE-1 and
XDM-AUTHORIZATION-1 store secret data in the file; so anyone who can read
the file can gain access to the X server.  SUN-DES-1 stores only the
identity of the pricipal who started the server
(unix.displayHostname@NISdomain when the server is started by XDM), and so
it is not useful to anyone not authorized to connect to the server.
.PP
Each entry in the .Xauthority file matches a certain connection family
(TCP/IP, DECnet or local connections) and X display name (hostname + display
number).  This allows multiple authorization entries for different displays
to share the same data file.  A special connection family (FamilyWild, value
65535) causes an entry to match every display, allowing the entry to be used
for all connections.  Each entry additionally contains the authorization
name and whatever private authorization data is needed by that authorzation
type to generate the correct information at connection setup time.
.PP
The xauth(1) program manipulates the .Xauthority file.  It understands the
semantics of the connection families and address formats, displaying them in
an easy to understand format.  It also understands that SUN-DES-1 uses
string values for the authorization data, and displays them appropriately.
.PP
The X server (when running on a workstation) reads authorization
information from a file name passed on the command line with the -auth
option (see the Xserver(1) man page).  The authorization entries in
the file are used to control access to the server.  In each of the
existing authorization schemes, the data needed by the server to initialize
an authorization scheme is identical to the data needed by the client to
generate the appropriate authorization information, so the same file can be
used by both processes.  This is especially useful when xinit(1) is used.
.IP "MIT-MAGIC-COOKIE-1"
This system uses 128 bits of data shared between the user and the X server.
Any collection of bits can be used.  Xdm generates these keys using a
cryptographically secure pseudo random number generator, and so the key to
the next session cannot be computed from the current session key.
.IP "XDM-AUTHORIZATION-1"
This system uses two pieces of information.  First, 64 bits of random data,
second a 56 bit DES encryption key (again, random data) stored
in 8 bytes, the last byte of which is ignored.  Xdm generates these keys
using the same random number generator as is used for MIT-MAGIC-COOKIE-1.
.IP "SUN-DES-1"
This system needs a string representation of the principal which identifies
the associated X server.  When XDM starts the X server, it uses the root
principal for the machine on which it is running "unix.hostname@nisdomain";
e.g. "unix.expire.lcs.mit.edu@x.lcs.mit.edu".  Putting the correct principal
name in the .Xauthority file causes Xlib to generate the appropriate
authorization information using the secure RPC library.
.SH FILES
\&.Xauthority
.SH "SEE ALSO"
X(1), xdm(1), Xserver(1), xauth(1), xhost(1)
