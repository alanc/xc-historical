.TH X 1 "16 October 1988"  "X Version 11"
.SH NAME
X - a portable, network transparent window system
.SH SYNOPSIS
.PP
X is a network transparent window system developed at MIT which runs on a wide
range of computing and graphics machines.  The core distribution from MIT
has both client and server support for the following operating systems:
.sp
.in +8
.nf
4.3BSD
A/UX 1.0
DOMAIN/IX 9.7
HP-UX 6.01
SunOS 3.2
Ultrix-32 Version 1.2
.fi
.in -8
.sp
Many vendors also support X on other platforms.
.SH "THE OFFICIAL NAMES"
The official names for this software are:
.sp
.ce 5
X
.br
X Window System
.br
X Version 11
.br
X Window System, Version 11
.br
X11
.sp
Note that the phrases X.11, X-11, X Windows or any permutation thereof, are
explicity excluded from this list and should not be used to describe the
X Window System.  Remember, it is a Window System named X, not a System named
X Window.
.PP
\fIX Window System\fP is a trademark of the
Massachusetts Institute of Technology.
.SH DESCRIPTION
X window system servers run on computers with bitmap displays.
The server
distributes user input to, and accepts output requests from various
client programs through a variety of different interprocess
communication channels.  Although the most common case is for the client
programs to be
running on the same machine as the server, clients can be run transparently
from other machines (including machines with different architectures and
operating systems) as well.
.PP
X supports overlapping hierarchical subwindows and text and
graphics operations, on both monochrome and color
displays.
For a full explanation of the functions that are available, see the
\fIXlib - C Language X Interface\fP manual, the
\fIX Window System Protocol\fP specification,
and various toolkit documents.
.PP
The core \fIX\fP protocol provides mechanism, not policy.  
Windows are manipulated (including
moving, resizing and iconifying) not by the server itself, but 
by a separate program called a ``window manager'' of your choosing.
This program is
simply another client and requires no special privileges.  If you
don't like the ones that are supplied (see \fIuwm(1)\fP and \fIwm(1)\fP),
you can write your own.
.PP
The number of programs that use \fIX\fP is growing rapidly.  Of particular
interest are:
a terminal emulator (\fIxterm\fP),
window managers (\fIwm\fP and \fIuwm\fP), 
a display manager (\fIxdm\fP),
mail managing utilities (\fIxmh\fP and \fIxbiff\fP),
a manual page browser (\fIxman\fP),
a bitmap editor (\fIbitmap\fP),
an access control program (\fIxhost\fP),
user preference setting programs (\fIxrdb\fP, \fIxset\fP, \fIxsetroot\fP,
and \fIxmodmap\fP),
a load monitor (\fIxload\fP), clock (\fIxclock\fP),
a font displayer (\fIxfd\fP),
utilities for listing information about fonts, windows, and displays
(\fIxlsfonts\fP, \fIxlswins\fP, \fIxwininfo\fP, and \fIxdpyinfo\fP,
\fIxprop\fP),
a protocol translator for running X10 programs (\fIx10tox11\fP),
a diagnostic for seeing what when events are generated (\fIxev\fP),
screen image manipulation utilities (\fIxwd\fP, \fIxwud\fP, \fIxpr\fP, and
\fIxmag\fP),
and various demos (\fIxeyes\fP, \fIico\fP, \fImuncher\fP, \fIpuzzle\fP, etc.).
.PP
Many additional utilities, window managers, games, toolkits, etc. are also
distributed with the core software.  See you site administrator for details
about what additional programs are available.
.SH GETTING STARTED
.PP 
There are currently 3 ways of getting the X server and an initial set of
client applications started.  The particular method used depends on what
operating system you are running and on whether or not you use other window
systems in addition to X.
.TP 4
.B "\fIxdm\fP (the X Display Manager)"
If you want to always have X running on your display, your site administrator
can set your machine up to use the X Display Manager \fIxdm\fP.  This program
is typically started by the system at boot time and takes care of keeping the
server running and getting users logged in.  If you are running
\fIxdm\fP, you will see a window on the screen welcoming you to the system and
asking for your username and password.  Simply type them in as you would at
a normal terminal, pressing the Return key after each.  If you make a mistake,
\fIxdm\fP will display an error message and ask you to try again.  After you
have successfully logged in, \fIxdm\fP will start up your X environment.  By
default, if you have an file named \fI.xsession\fP in your home directory,
\fIxdm\fP will treat it as a program (or shell script) to run to start up 
your initial clients (such as terminal emulators, clocks, a window manager,
user settings for things like the background, the speed of the pointer, etc.).
Your site administrator can provide details.
.TP 4
.B "\fIxterm \-L\fP (started from \fI/etc/init\fP)"
Some versions of UNIX that are derived from 4.3bsd support starting the window
system and an initial \fIxterm\fP window from the system terminal line
configuration file \fI/etc/ttys\fP.  As with \fIxdm\fP, there will be a 
window requesting your username and password.  However, this window will become
your primary window and is not configurable on a per-user basis.
Sites using this method should switch to \fIxdm\fP as \fIxterm -L\fP may not be
supported in future releases.
.TP 4
.B "\fIxinit\fP (run manually from the shell)"
Sites that support more than one window system might choose to use the
\fIxinit\fP program for starting X manually.  If this is true for your 
machine, your site administrator will probably have provided a program 
named "x11", "startx", or "xstart" that will do site-specific initialization
(such as loading convenient default resources, running a window manager, 
displaying a clock, and starting several terminal emulators) in a nice
way.  If not, you can build such a script using the \fIxinit\fP program.
This utility simply runs one user-specified program to start the server,
runs another to start up any desired clients, and then waits for either to
finish.  Since either or both of the user-specified programs may be a shell 
script, this gives substantial flexibility at the expense of a human 
nice interface.  For this reason, \fIxinit\fP is not intended for end users.
.SH "SPECIFYING A DISPLAY NAME"
.PP
To distinguish one display on a network from another, each X server has a
name of the form:
.sp
.ce 1
\fIhostname:displaynumber.screennumber\fP
.sp
Names like this are called \fIdisplay names\fP, and contain the following
information:
.TP 4
.I hostname
The \fIhostname\fP specifies the name of the machine to which the display is
connected.  If the hostname is not given, the most efficient way of 
communicating to a server on the same machine will be assumed.
.TP 4
.I displaynumber
The phrase "display" is usually used to refer to collection of monitors that
share a common keyboard and pointer (mouse, tablet, etc.).  Most workstations
tend to only have one keyboard, and therefore, only one display.  Larger, 
multi-user
systems, however, will frequently have several displays so that more than
one person can be doing graphics work at once.  To avoid confusion, each
display on a machine is assigned a \fIdisplay number\fP (starting with 0)
when the X server for that display is started.  The display number must always
be given in a display name.
.TP 4
.I screennumber
Some displays share a single keyboard and pointer among two or more monitors.
Since each monitor has its own set of windows, each screen is assigned a
\fIscreen number\fP (starting with 0) when the X server for that display is
started.  If the screen number is not given, then screen 0 will be asssumed.
.PP
On Unix systems, the default display name for X programs to use is stored 
in your DISPLAY environment variable.  This variable is set automatically
by the \fIxterm\fP terminal emulator.  However, when you log into another
machine on a network, you'll need to set DISPLAY by hand to point to your
display.  For example,
.sp
.in +8
.nf
% setenv DISPLAY myws:0
$ DISPLAY=myws:0; export DISPLAY
.fi
.in -8
.PP
Finally, most X programs accept a command line option of 
\fB-display \fIdisplayname\fR to temporarily override the contents of
DISPLAY.  This is most commonly used to pop windows on your neighbors screen or
as part of a "remote shell" command to start an xterm pointing back to your
display.  For example,
.sp
.in +8
.nf
% xeyes -display joesws:0 -geometry 1000x1000+0+0
% rsh big xterm -display myws:0 -ls </dev/null &
.fi
.in -8
.PP
X servers usually listen for connections on a variety of different 
communications channels (e.g. network byte-stream, shared memory, etc.) 
and can, therefore, have serveral different display names.
The \fIhostname\fP part of the display name determines type of channel
(also called a transport layer) to be used.  The sample servers from MIT
support the following types of connections:
.TP 4
.B TCP\/IP
.br
The hostname part of the display name should be the server machine's
IP address name.  Full Internet names (e.g., expo.lcs.mit.edu),
abbreviated names (e.g., expo), and IP addresses (e.g., 18.30.0.212)
are allowed.  For example:  \fImyworkstation:0\fP, \fIbigmachine:1\fP, and 
\fIhydra:0.1\fP.
.TP 4
.B "Unix domain sockets"
.br
The hostname part of the display name should be the string "unix" (in lower
case letters).  For example:  \fIunix:0\fP, \fIunix:1\fP, and \fIunix:0.1\fP.
.TP 4
.B DECnet
.br
The hostname part of the display name should be the server machine's 
nodename followed by a colon.  For example:  \fImyws::0\fP, \fIbig::1\fP,
and \fIhydra::0.1\fP.
.PP
.SH "SPECIFYING WINDOW GEOMETRY"
One of the advantages of using window systems over hardwired terminals is that 
applications don't have to be restricted to a particular size or location
on the screen.
Although the layout of windows on a display is controlled
by the window manager that the user is running, most X programs accept
a command line argument that is treated as the prefered size and location
for this particular application's window.
.PP
This argument, usually given as ``-geometry WxH+X+Y,'' specifies that
the window should have a width of W and height of H (usually measured in
pixels or characters, depending on the application),
and the upper left corner X pixels to the right and Y pixels below the
upper left corner of the screen (origin (0,0)).  ``WxH'' can be omitted
to obtain the default application size, or ``+X+Y'' can be omitted
to obtain the default application position (which is usually then left up
to the window manager or user to choose).
The X and Y values may be negative to
position the window off the screen.  In addition, if minus signs are used
instead of plus signs (e.g. WxH-X-Y), then (X,Y) represents the location
of the lower right hand corner of the window relative to the lower right
hand corner of the screen.
.PP
By combining plus and minus signs, the window may be place relative to any
of the four corners of the screen.  For example:
.TP 4
.I "xclock -geometry 555\fRx\fI333+11+22"
This will request a clock 555 pixels wide and 333 pixels tall, with the
upper left corner located at (11,22).
.TP 4
.I "xload -geometry 300\fRx\fI200-0+0"
This will request a load average monitor measuring 300 by 200 pixels in the 
upper right hand corner of the screen.
.TP 4
.I "xbiff -geometry 48\fRx\fI48--5--10"
This will request a mail box monitor measuring 48 by 48 pixels whose 
lower right and corner is 5 pixel off the right edge and the screen 
and 10 pixels off the bottom edge.
.PP
.SH "COMMAND LINE ARGUMENTS"
Most X programs attempt to use a common set of names for their command line
arguments.
The X Toolkit automatically handles the following arguments:
.TP 8
.B \-bg \fIcolor\fP, \fB\-background \fIcolor\fP
Either option specifies the color to use for the window background.
.TP 8
.B \-bd \fIcolor\fP, \fB\-bordercolor \fIcolor\fP
Either option specifies the color to use for the window border.
.TP 8
.B \-bw \fInumber\fP, \fB\-borderwidth \fInumber\fP
Either option specifies the width in pixels of the window border.
.TP 8
.B \-display \fIdisplay\fP
This option specifies the name of the X server to use.
.TP 8
.B \-fg \fIcolor\fP, \fB\-foreground \fIcolor\fP
Either option specifies the color to use for text or graphics.
.TP 8
.B \-fn \fIfont\fP, \fB-font \fIfont\fP
Either option specifies the font to use for displaying text.
.TP 8
.B \-geometry \fIgeometry\fP
This option specifies the initial size and location of the window.
.TP 8
.B \-iconic
.br
This option indicates that application should start out in an iconic state.  
Note that how
this state is represented is controlled by the window manager that the user
is running.
.TP 8
.B \-name
.br
This option specifies the name under which resources for the
application should be found.  This option is useful in shell
aliases to distinguish between invocations of an application,
without resorting to creating links to alter the executable file name.
.TP 8
.B \-rv\fP, \fB\-reverse\fP
Either option indicates that the program should simulate reverse video if 
possible, often by swapping the foreground and background colors.  Not all
programs honor this or implement it correctly.  It is usually only used on
monochrome displays.
.TP 8
.B \+rv
.br
This option indicates that the program should not simulate reverse video.  
This is used to
override any defaults since reverse video doesn't always work properly.
.TP 8
.B \-synchronous
This option indicates that requests to the X server should be sent 
synchronously, instead of asynchronously.  Since 
.I Xlib
normally buffers requests to the server, errors do not necessarily get reported
immediately after they occur.  This option turns off the buffering so that
the application can be debugged.  It should never be used with a working 
program.
.TP 8
.B \-title \fIstring\fP
This option specifies the title to be used for this window.  This information 
is sometimes
used by a window manager to provide some sort of header identifying the window.
.TP 8
.B \-xrm \fIresourcestring\fP
This option specifies a resource name and value to override any defaults.  It 
is also very useful for setting resources that don't have explicitly command 
line arguments.
.SH "RESOURCES"
To make the tailoring of applications to personal preferences easier, X 
supports several mechanisms for storing default values for program resources 
(e.g. background color, window title, etc.)
Resources are specified as strings of the form 
\fI``name*subname*subsubname...: value''\fP (see the
.I Xlib
manual section \fIUsing the Resource Manager\fP for more details) that are 
loaded into a
client when it starts up.  The \fIXlib\fP routine
.I XGetDefault(3X)
and the resource utilities within the X Toolkit
obtain resources from the following sources:
.TP 8
.B "RESOURCE_MANAGER root window property"
Any global resources that should be available to clients on all machines 
should be stored in the RESOURCE_MANAGER property on the
root window using the \fIxrdb(1)\fP program.
.TP 8
.B "application-specific directory"
Any application- or machine-specific resources can be stored in
the class resource files located in the XAPPLOADDIR directory (this is a 
configuration parameter that is /usr/lib/X11/app-defaults in the 
standard distribution).
.TP 8
.B XENVIRONMENT
Any user- and machine-specific resources may be specified by setting
the XENVIRONMENT environment variable to the name of a resource file
to be loaded by all applications.  If this variable is not defined,
the X Toolkit looks for a file named .Xdefaults-\fIhostname\fP,
where \fIhostname\fP is the name of the host where the application
is executing.
.TP 8
.B \-xrm \fIresourcestring\fP
Applications that use the X Toolkit can have resources specified from the 
command line.  The \fIresourcestring\fP is a single resource name and value as
shown above.  Note that if the string contains characters interpreted by
the shell (e.g., asterisk), they must be quoted.
Any number of \fB\-xrm\fP arguments may be given on the
command line.
.PP
Program resources are organized into groups called ``classes,'' so that 
collections of individual ``instance'' resources 
can be set all at once.  By convention, the instance name of a resource
begins with a lowercase letter and class name with an upper case letter.
Multiple word resources are concatentated with the first letter of the 
succeeding words capitalized.  Applications written with the X Toolkit
will have at least the following resources:
.PP
.TP 8
.B background (\fPclass\fB Background)
This resource specifies the color to use for the window background.
.PP
.TP 8
.B borderWidth (\fPclass\fB BorderWidth)
This resource specifies the width in pixels of the window border.
.PP
.TP 8
.B borderColor (\fPclass\fB BorderColor)
This resource specifies the color to use for the window border.
.PP
Most X Toolkit applications also have the resource \fBforeground\fP
(class \fBForeground\fP), specifying the color to use for text
and graphics within the window.
.PP
By combining class and instance specifications, application preferences 
can be set quickly and easily.  Users of color displays will frequently
want to set Background and Foreground classes to particular defaults.
Specific color instances such as text cursors can then be overridden
without having to define all of the related resources.
.PP
When a named resource is unavailable (for example, a color named
chartrusse or a font named teeneyweeney), normally no error message
will be printed; whether or not useful results ensue is dependent
on the particular application.  If you wish to see error messages
(for example, if an application is failing for an unknown reason),
you may specify the value ``on'' for the resource named
``StringConversionWarnings.''  If you want
such warnings for all applications, specify ``*StringConversionWarnings:on''
to the resource manager.  If you want warnings only for a single
application named ``zowie'', specify ``zowie*StringConversionWarnings:on''
to the resource manager.
.SH DIAGNOSTICS
The default error handler uses the Resource Manager to build diagnostic
messages when error conditions arise.  The default error database is
stored in the file XErrorDB in the directory specified by the LIBDIR
configuration parameter (/usr/lib/X11 in the standard distribution).  If
this file is not installed, error messages will tend to be somewhat cryptic.
.SH BUGS
If you encounter a \fBrepeatable\fP bug, please contact your site 
administrator for instructions on how to submit a X Bug Report.
.SH "SEE ALSO"
.PP
Xserver(1),
mkfontdir(1),
bitmap(1), pseudoroot(1), uwm(1), x10tox11(1), xbiff(1), xcalc(1), xclock(1),
xdpyinfo(1), xedit(1), xev(1), xfd(1), xhost(1), xinit(1), xkill(1), xload(1),
xlogo(1), xlsfonts(1), xlswins(1), xmag(1), xman(1), xmh(1), xmodmap(1),
xdpr(1), xpr(1), xprop(1), xrdb(1), xrefresh(1), xset(1), xsetroot(1),
resize(1), xterm(1), xwd(1), xwininfo(1), xwud(1),
Xapollo(1), Xqdss(1), Xqvss(1), Xsun(1), XmacII(1), Xplx(1), bdftosnf(1),
kbd_mode(1), todm(1), tox(1), biff(1), init(8), ttys(5),
.I "Xlib \- C Language X Interface,"
.I "X Toolkit Intrinsics - C Language X Interface"
.SH COPYRIGHT
The following copyright and permission notice outlines the rights and
restrictions covering most parts of the standard distribution of the X Window
System from MIT.  Other parts have additional or different copyrights
and permissions; see the individual source files.
.sp
Copyright 1984, 1985, 1986, 1987, 1988, Massachusetts Institute of 
Technology.
.sp
Permission to use, copy, modify, and distribute this
software and its documentation for any purpose and without
fee is hereby granted, provided that the above copyright
notice appear in all copies and that both that copyright
notice and this permission notice appear in supporting
documentation, and that the name of M.I.T. not be used in
advertising or publicity pertaining to distribution of the
software without specific, written prior permission.
M.I.T. makes no representations about the suitability of
this software for any purpose.  It is provided "as is"
without express or implied warranty.
.sp
This software is not subject to any license of the American
Telephone and Telegraph Company or of the Regents of the
University of California.
.SH AUTHORS
.PP
A cast of thousands.
.PP
It is no longer feasible to list all people who have contributed
something to X, but see doc/contributors in the standard sources.

