.\" $XConsortium$
.\"
.\" Copyright 1994
.\" Massachusetts Institute of Technology, Cambridge, Massachusetts.
.\"
.\" Permission to use, copy, modify and distribute this documentation for any
.\" purpose and without fee is hereby granted, provided that the above copyright
.\" notice appears in all copies and that both that copyright notice and this
.\" permission notice appear in supporting documentation, and that the name of
.\" M.I.T. not be used in in advertising or publicity pertaining
.\" to distribution of the software without specific, written prior permission.
.\" M.I.T makes no representations about the suitability of the
.\" software described herein for any purpose.
.\" It is provided ``as is'' without express or implied warranty.
\&
.sp 1
.ce 3
\s+1\fBChapter 14\fP\s-1

\s+1\fBSession Participation\fP\s-1
.sp 2
.nr H1 14
.nr H2 0
.nr H3 0
.nr H4 0
.nr H5 0
.LP
.XS
Chapter 14 \- Session Participation
.XE
.LP
[This design is subject to revision. -- ed.]

.NH 2
Participating in a Session
.XS
\fB\*(SN Participating in a Session\fP
.XE
.LP
Applications can participate in a user's session, exchanging messages
with the session manager through the X Session Management Protocol.
.LP
To participate in a session, call
.PN XtCreateWidget
specifying 
.PN sessionClass
as the \fIobject_class\fP.
An instance of
.PN sessionClass
or a subclass uniquely identifies a session participant.
.LP
If a session manager is running, the widget will attempt to establish a
connection to the session manager at the time it is created.
If the attempt fails, the default error handler is called to report
the failure.
If the attempt succeeds, the widget will call
.PN XtAppAddInput
to register the input handler which processes messages
from the session manager.
[This implies each additional Session widget will attempt to call
.PN XtAppAddInput
which implies each connection between this client and the SM will
need a separate file descriptor which is not what ICE will normally do. -ed.]
.LP
To transfer management of an existing session participant to
the \*(xI, pass the session connection ID to
.PN XtCreateWidget
as the value of the XtNconnection resource when creating a Session object.
.LP
To enable the window manager to save window state of a session participant
across sessions, the session widget should be specified as the value of
the ApplicationShell XtNsession resource on the client leader shell widget.
This is usually the root of the widget tree.
Once realized, the client leader shell widget may be unmapped
but must not be unrealized while the application is a session participant.

.NH 3
Initialization Routine for Session Participants
.XS
\fB\*(SN Initialization Routine for Session Participants
.XE
.LP
To initialize the \*(xI internals, create an application context,
open and initialize a display, create the initial application shell
instance, create a session object, and set the XtNsession resource on
the application shell, an application may use
.PN XtSessionInitialize
.IN "XtSessionInitialize" "" "@DEF@"
or 
.PN XtVaSessionInitialize .
.IN "XtVaSessionInitialize" "" "@DEF@"
.FD 0
Widget XtSessionInitialize(\fIapp_context_return\fP, \fIapplication_class\fP, \
\fIsession_name\fP,
                                          \fIsession_class\fP, \
\fIoptions\fP, \fInum_options\fP,
                                          \fIargc_in_out\fP, \
\fIargv_in_out\fP, \fIfallback_resources\fP, \fIargs\fP, \fInum_args\fP)
.br
      XtAppContext *\fIapp_context_return\fP;
.br
      String \fIapplication_class\fP;
.br
      String \fIsession_name;	\fP	
.br
      WidgetClass \fIsession_class;\fP	
.br
      XrmOptionDescList \fIoptions\fP;
.br
      Cardinal \fInum_options\fP;
.br
      int *\fIargc_in_out\fP;
.br
      String *\fIargv_in_out\fP;
.br
      String *\fIfallback_resources\fP;
.br
      ArgList \fIargs\fP;
.br
      Cardinal \fInum_args\fP;
.FN
.LP
All parameters are as described in
.PN XtAppInitialize ,
with the addition of:
.IP \fIsession_name\fP 1i
Specifies the name of the session widget instance, or NULL.
If \fIsession_name\fP is NULL and \fIsession_class\fP is not NULL,
the name of the session instance will be ``session''.
.IP \fIsession_class\fP 1i
Specifies the widget class pointer for a session object, or NULL.
.LP
If \fIsession_class\fP is NULL, no session object is created;
otherwise it must be
.PN sessionClass
or any subclass thereof
and the session object will be created as an unmanaged child of the shell
and the XtNsession resource of the shell is set to the session object.
.LP
Note that of the shell classes defined by the \*(xI, only the
ApplicationShell accepts children of sessionClass or a subclass of
sessionClass.
.LP
The 
.PN XtSessionInitialize
function
performs processing equivalent to:
.LP
.Ds 0
.TA .5i .5i
{
	Widget root;
	Widget session;
	Arg args[1];

	root = XtAppInitialize(app_context_return, application_class, 
	                       options, num_options, argc_in_out, argv_in_out,
	                       fallback_resources, args, num_args);
	if (session_class) {
		session = XtCreateWidget(session_name ? session_name : "session",
		                         session_class, root, NULL, 0);
		XtSetArgs(args, XtNsession, session);
		XtSetValues(root, args, (Cardinal)1);
	}
	return root;
}
.De

.NH 3
Client-Initiated Checkpointing
.XS
\fB\*(SN Client-Initiated Checkpointing
.XE
.LP 
Clients may save their own state at any time.
However in order to synchronize the session manager properties with
client state, the application must explicitly prompt the session manager.
Users commonly instigate checkpoints through direct interaction with the
session manager.
.LP
To instigate a checkpoint, use
.PN XtSessionRequestCheckpoint .
.IN "XtSessionRequestCheckpoint" "" "@DEF@"
.FD 0
void XtSessionRequestCheckpoint(\fIwidget\fP, \fIsave_type\fP, \
\fIinteract_style\fP, \fIshutdown\fP, \fIfast\fP,
                                                   \fIglobal\fP)
.br
      Widget \fIwidget\fP;
.br
      int \fIsave_type\fP;
.br
      int \fIinteract_style\fP;
.br
      Boolean \fIshutdown\fP;
.br
      Boolean \fIfast\fP;
.br
      Boolean \fIglobal\fP;
.FN
.IP \fIwidget\fP 1i
Specifies the session widget.
.IP \fIsave_type\fP 1i
Specifies the type of information that should be saved.
.IP \fIinteract_style\fP 1i
Specifies how and if the user may get involved.
.IP \fIshutdown\fP 1i
Specifies whether a system shutdown motivates the request.
.IP \fIfast\fP 1i
Specifies whether checkpointing should be done as quickly as possible.
.IP \fIglobal\fP 1i
Specifies whether the request applies to all clients.
.LP
The 
.PN XtSessionRequestCheckpoint
function derives the session management connection
object from the specified session widget, and calls 
.PN SmcRequestSaveYourself 
with the specfied request parameters.

.NH 3
Client Response to a Checkpoint
.XS
\fB\*(SN Client Response to a Checkpoint\fP
.XE
.LP
Clients are responsible for saving their own state in response to a
request by the session manager to do so.  
Typically the application saves its state in a file whose name is formed by
using the Session object's XtNsessionID resource.
The application may also set the Session object's XtNrestartCommand
resource to include the name of the file on the command line.
Upon restart, the application will process the contents of the file
to restore its own state.
.LP
The session manager instigates a checkpoint by sending the application a
.PN SaveYourself
request.  
When the request arrives, the \*(xI calls the procedures on the
session widget's XtNsaveCallback list which were previously registered by
the application.
This particular invocation mechanism is not equivalent to the callback
mechanism, or using
.PN XtCallCallbacks
or
.PN XtCallCallbackList ,
in some respects.
Specifically, this mechanism differs from the usual model of callbacks
because each procedure may return a value which will prevent all remaining
procedures on the list from being executed.
.LP
Each procedure on the XtNsaveCallback list receives a token
in the \fIcall_data\fP parameter.
The same token must be returned in the \fIcall_data\fP parameter
when the callback procedure returns.
Additional tokens may be requested while a checkpoint is under way.
The checkpointing operation is not complete until all tokens are returned.
.LP
To request an additional token for a checkpointing operation with a
deferred outcome, use
.PN XtSessionGetToken .
.IN "XtSessionGetToken" "" "@DEF@"
.FD 0
XtCheckpointToken XtSessionGetToken(\fIwidget\fP, \fItype\fP)
.br
      Widget \fIwidget\fP;
.br
      int \fItype\fP;
.FN
.IP \fIwidget\fP 1i
Specifies the session widget.
.IP \fItype\fP 1i
Specifies the value in the type field of the token.
.LP
The 
.PN XtSessionGetToken
function will return NULL if a checkpoint operation instigated
by the session manager is not currently under way.
.LP
To indicate the completion of a deferred save operation and to return the
checkpoint token use
.PN  XtSessionReturnToken .
.IN "XtSessionReturnToken" "" "@DEF@"
.FD 0
void XtSessionReturnToken(\fItoken\fP)
.br
      XtCheckpointToken \fItoken\fP;
.FN
.IP \fItoken\fP 1i
Specifies the token to be returned.
.sp
.LP
The checkpointing token is of type
.PN XtCheckpointToken .
.IN "XtCheckpointToken" "" "@DEF@"
.IN "XtCheckpointTokenRec" "" "@DEF@"
.LP
.Ds 0
.TA .5i 2i 4i
.ta .5i 2i 4i
typedef struct {
	Widget	session;
	int	type;
	int	save_type;
	int	interact_style;
	Boolean	shutdown;
	Boolean	fast;
	Boolean	status;	/* return */
	XtInteractProc	interact_proc	/* return */
	XtPointer	interact_client_data;	/* return */
	int	interact_dialog_type;	/* return */
	Boolean	user_cancel;	/* return */
} XtCheckpointTokenRec, *XtCheckpointToken;
.De
.LP
The \fIsession\fP field identifies the session widget representing
the session participant which has received the
.PN SaveYourself
request.
.LP
The \fItype\fP field will reflect the reason for the callback
invocation and will contain one of the following values,
.sp
.Ds 0
.TA 3i
.ta 3i
#define XtSessionCheckpoint	0
#define XtSessionInteract	1
#define XtSessionCancel	2
.De
.LP
The \fItype\fP field makes it possible for a single procedure to encapsulate
the implementation of logically-related, event-driven, checkpoint processing.
A procedure may differentiate its functionality based on the value of the
\fItype\fP field.  When a procedure is being called from the XtNsaveCallback
list, the type is 
.PN XtSessionCheckpoint ;
from an interact request, the type is
.PN XtSessionInteract ;
from the XtNcancelCallback list, the type is 
.PN XtSessionCancel .
For example, when type is
.PN XtSessionCheckpoint ,
the procedure may return the token with an interact request.
When type is
.PN XtSessionInteract , the same procedure may popup a dialog box and
register a function on the session widget's XtNcancelCallback callback list.
When type is
.PN XtSessionCancel
the procedure would pop down the dialog box in case the shutdown
is cancelled before the user responds to the dialog box.
The callbacks attached to the dialog box itself would perform 
checkpoint processing, remove the callback from the XtNcancelCallback
callback list, pop down the dialog box, and return the checkpoint token.
.LP
The \fIsave_type\fP, \fIinteract_style\fP, \fIshutdown\fP, and \fIfast\fP
fields of the token contain the parameters of the
.PN SaveYourself
request as described in the ``X Session Management Protocol'' and the
``X Session Management Library.''
These field values should not be changed by the application programmer.
The possible values of \fIsave_type\fP are
.PN SmSaveLocal ,
.PN SmSaveGlobal ,
and 
.PN SmSaveBoth ;
these indicate the type of information to be saved.
The possible values of \fIinteract_style\fP are
.PN SmInteractStyleNone ,
.PN SmInteractStyleErrors ,
and
.PN SmInteractStyleAny ;
these indicate whether user interaction is permitted
and if so, what kind of interaction.
If \fIshutdown\fP is
.PN True ,
a system shutdown is taking place,
and the client must not change state after completing the checkpoint. 
If \fIfast\fP is
.PN True ,
the client should checkpoint itself as quickly as possible.
.LP
The remaining fields in the checkpoint token structure are provided for
the client to return information to the \*(xI.
.LP
Upon entry to a procedure on the XtNsaveCallback list the token fields
have the following initial values: \fIsave_status\fP is
.PN XtSessionSaveSuccess ;
\fIinteract_proc\fP and \fIinteract_client_data\fP have been
initialized to NULL; \fIdialog_type\fP is undefined
and \fIuser_cancel\fP is
.PN False .
.LP
To indicate the outcome of the checkpoint operation performed by the
callback procedure, set \fIsave_status\fP to one of the following values:
.sp
.Ds 0
.TA 3i
.ta 3i
#define XtSessionSaveSuccess	0
#define XtSessionSaveFailure	1
.De
.LP
.PN XtSessionSaveFailure
indicates some portion of the application state
could not be successfully saved.
Returning
.PN XtSessionSaveFailure
will cause all further client checkpoint
procedures and any pending interact procedures to be averted, and
a response to the
.PN SaveYourself
request is sent to the session manager indicating failure.
The \fIsave_status\fP return value is required.
.LP
When the \fIinteract_style\fP allows user interaction, the application may
request permission to interact with the user during a checkpointing
operation by supplying an
.PN XtInteractProc
with optional client data
and the type of user dialog desired.
The values for \fIdialog_type\fP are defined by the Session Management
Library and are
.PN SmDialogError
and
.PN SmDialogNormal .
.LP
When the token is returned with an \fIinteract_proc\fP and \fIdialog_type\fP,
and the specified \fIinteract_style\fP permits the specified \fIdialog_type\fP,
the \*(xI will send an
.PN InteractRequest
to the session manager if an interact request is not already outstanding
for this session participant.
.LP
Upon return from a procedure on the XtNsaveCallback list, the value
of the token's \fIuser_cancel\fP field is not examined.

.NH 4
Interacting with the User During a Checkpoint
.XS
\fB\*(SN Interacting with the User During a Checkpoint\fP
.XE
.LP
Procedures which interact with the user cannot be preregistered by the
application, and so during a checkpointing operation when user interaction
is desired, the application must return a token specifying the request
for user interaction.
When permission to interact with the user is received by the \*(xI
from the session manager, an application-specified procedure will be
invoked with the specified \fIclient_data\fP as soon as all nested dispatch
levels have completed, and the current event processing has completed
and the dispatch is about to return.
.IN "XtInteractProc" "" "@DEF@"
.sp
.FD 0
typedef void (*XtInteractProc) (Widget, XtPointer, XtCheckpointToken);
.br
      Widget \fIwidget\fP;
.br
      XtPointer \fIclient_data\fP;
.br
      XtCheckpointToken \fItoken\fP;
.FN
.IP \fIwidget\fP 1i
Passes the appropriate session object.
.IP \fIclient_data\fP 1i
Passes the client_data as was specified by the application.
.IP \fItoken\fP 1i
Passes the checkpoint token.
.LP
The token should be returned when the user interaction and all
associated application checkpointing has completed, by calling
.PN XtSessionReturnToken .
A token passed to an XtInteractProc can be returned only by calling
.PN XtSessionReturnToken .
.LP
All informational fields and all default values of the return fields 
are as previously described.
.LP
The value of the \fIshutdown\fP field of a token
indicates whether the checkpointing is being performed
in expectation of a shutdown of the current session.
When a token of type
.PN XtSessionInteract
is returned, if the value of the \fIuser_cancel\fP field is
.PN True ,
the \*(xI will send a message to the session manager indicating
that the user has requested the session shutdown be cancelled.
When a token is returned indicating the user requested cancellation of
the session shutdown, any pending interact procedures will not be called
by the \*(xI.
.LP
[What happens when the interact procedure tries to do its own
X event processing? -- ed. ]

.NH 4
Completion Conditions of a Checkpoint Operation
.XS
\fB\*(SN Completion Conditions of a Checkpoint Operation\fP
.XE
.LP
All procedures on the XtNsaveCallback list are called and have returned
before any interact procedure is called.
.LP
Modifications to the XtNsaveCallback list while it is executing are
not effective until the next time the session manager issues a
.PN SaveYourself
request.  
.LP
Checkpointing is assumed to be incomplete until all callback procedures
on the XtNsaveCallback list have returned, and all additional tokens
passed out by
.PN XtSessionGetToken
have been returned by corresponding calls to
.PN XtSessionReturnToken .
In addition, if the checkpointing operation involves user interaction,
checkpointing will be assumed to be incomplete until all requests for
interaction have been granted or have been averted by a cancellation,
and all interact procedures have indicated completion by returning the token
by a call to
.PN XtSessionReturnToken .
An interact procedure returning a token with save_status equal to
.PN XtSessionSaveFailure
will avert the execution of any pending interact procedures.
Otherwise, the return of a token of type
.PN XtSessionInteract
will cause the least recently requested interact procedure to be
invoked as soon as all nested dispatch levels have completed,
and the current event processing has completed and the dispatch
is about to return.
.LP
When all the tokens have been returned, the \*(xI will always set
all the required session properties with the session manager,
and will also set all non-NULL non-required session properties.
Finally the \*(xI will report the result of the checkpoint operation to
the session manager by sending the
.PN SaveYourselfDone
message.

.NH 4
Client Response to a Checkpoint Cancellation
.XS
\fB\*(SN Client Response to a Checkpoint Cancellation\fP
.XE
.LP
Callbacks registered on the XtNcancelCallback list are invoked when the
session manager sends a
.PN ShutdownCancelled
message.  The call data for these callbacks is NULL.

.NH 4
Client Response to Session Shutdown
.XS
\fB\*(SN Client Response to Session Shutdown\fP
.XE
.LP
Callbacks registered on the XtNdieCallback list are invoked when the
session manager sends a
.PN Die
message.
The call data for these callbacks is NULL.
The callbacks on this list should do whatever is appropriate to quit
the application.
The \*(xI will close the connection to the session manager
immediately before invoking the XtNdieCallback list.

.NH 3
Destruction of the Session Object
.XS
\fB\*(SN Destruction of the Session Object\fP
.XE
.LP
To insure continuation of session participation beyond the destruction
of the session instance, retrieve the session connection ID with
.PN XtGetValues ,
then set the XtNconnection resource to NULL
before destroying the session widget with
.PN XtDestroyWidget .
Otherwise, when the session widget is destroyed, the connection to the
session manager will be closed.

.NH 2
Session Objects
.XS
\fB\*(SN Session Objects\fP
.XE
.LP
The Session object contains mechanisms supporting participation in the
X Session Management Protocol.  It is a subclass of Object.  The Session
object has no display semantics and no semantics associated with X event
processing.

.NH 3
SessionClassPart Structure
.XS
\*(SN SessionClassPart Structure
.XE
.LP
As with the
.PN ObjectClassPart
structure, all fields in the
.PN SessionClassPart
structure have the same purpose and function as the corresponding fields
in
.PN CoreClassPart ;
fields whose names are ses\fIn\fP for some integer \fIn\fP are not
used for Session but exist to pad the data structure so that it matches
Core's class record.
The class record initialization must fill all ses\fIn\fP fields with NULL
or zero as appropriate to the type.

.IN "SessionClassPart" "" "@DEF@"
.Ds 0
.TA .5i 2i
.ta .5i 2i
typedef struct _SessionClassPart {
	WidgetClass	superclass;
	String	class_name;
	Cardinal	widget_size;
	XtProc	class_initialize;
	XtWidgetClassProc	class_part_initialize;
	XtEnum	class_inited;
	XtInitProc	initialize;
	XtArgsProc	initialize_hook;
	XtProc	ses1;
	XtPointer	ses2;
	Cardinal	ses3;
	XtResourceList	resources;
	Cardinal	num_resources;
	XrmClass	xrm_class;
	Boolean	ses4;
	XtEnum	ses5;
	Boolean	ses6;
	Boolean	ses7;
	XtWidgetProc	destroy;
	XtProc	ses8;
	XtProc	ses9;
	XtSetValuesFunc	set_values;
	XtArgsFunc	set_values_hook;
	XtProc	ses10;
	XtArgsProc	get_values_hook;
	XtProc	ses11;
	XtVersionType	version;
	XtPointer	callback_private;
	String	ses12;
	XtProc	ses13;
	XtProc	ses14;
	XtPointer	extension;
} SessionClassPart;
.De
.LP
The
Session
class record consists of just the
.PN SessionClassPart .
.LP
.Ds 0
.TA .5i 2i
.ta .5i 2i
.IN "SessionClassRec" "" "@DEF@"
.IN "SessionClass" "" "@DEF@"
typedef struct _SessionClassRec {
	SessionClassPart	session_class;
} SessionClassRec, *SessionClass;
.De
.LP
The predefined class record and pointer for
.PN SessionClassRec
are
.LP
In Intrinsic.h :
.Ds 0
extern SessionClassRec sessionClassRec;
.De
.LP
In
Intrinsic.h :
.Ds 0
extern WidgetClass sessionClass;
.De
.LP
The opaque types
.PN Session
and
.PN SessionClass
and the opaque variable
.PN sessionClass
are defined for generic actions on objects
whose class is Session or a subclass of
Session.
.PN Intrinsic.h
uses an incomplete structure definition to ensure that the compiler
catches attempts to access private data:
.LP
.Ds 0
typedef struct _SessionClassRec* SessionClass;
.De

.NH 3
SessionPart Structure
.XS
\*(SN SessionPart Structure
.XE
.LP
In addition to the
.PN ObjectPart
fields,
Session
objects have the following fields defined in the
.PN SessionPart
structure.
.LP
.IN "SessionPart" "" "@DEF@"
.Ds 0
.TA .5i 2i
.ta .5i 2i
typedef struct _SessionPart {
	/* connection state resources */
	SmcConn	connection;
	String	session_id;
	/* session property resources */
	String*	restart_command;
	String*	clone_command;
	String*	discard_command;
	String*	resign_command;
	String*	shutdown_command;
	String*	environment;
	String	current_dir;
	short	restart_style;
	/* client resources */
	XtCallbackList	save_callbacks;
	XtCallbackList	die_callbacks;
	XtCallbackList	cancel_callbacks;
	/* private session properties */
	String	user_id;
	String	program_name;
	String	process_id;
	/* private widget state */
	Boolean	cancel;
	int	interact_count;
	/* other private widget state fields may be added */
	XtPointer	extension;
} SessionPart;
.De
.LP
Session
objects have the Session fields immediately following the Object fields.
.LP
.IN "SessionRec" "" "@DEF@"
.Ds 0
.TA .5i 2i
.ta .5i 2i
typedef struct _SessionRec {
	ObjectPart	object;
	SessionPart	session;
} SessionRec;
.De
.LP
In
.PN Intrinsic.h :
.Ds 0
typedef struct _SessionRec* Session;
.De

.NH 3
Session Resources
.XS
\fB\*(SN Session Resources\fP
.XE
.LP
The resource names, classes, and representation types that are specified
in the
.PN sessionClassRec
resource list are
.TS
lw(1.5i) lw(1.5i) lw(2.5i) .
_
.sp 6p
Name	Class	Representation
.sp 6p
_
.sp 6p
XtNconnection	XtCConnection	XtRSmcConn
XtNsessionID	XtCSessionID	XtRString
XtNrestartCommand	XtCRestartCommand	XtRStringArray
XtNcloneCommand	XtCCloneCommand	XtRStringArray
XtNdiscardCommand	XtCDiscardCommand	XtRStringArray
XtNresignCommand	XtCResignCommand	XtRStringArray
XtNshutdownCommand	XtCShutdownCommand	XtRStringArray
XtNenvironment	XtCEnvironment	XtRStringArray
XtNcurrentDirectory	XtCCurrentDirectory	XtRString
XtNrestartStyle	XtCRestartStyle	XtRRestartStyle
XtNsaveCallback	XtCCallback	XtRCallback
XtNdieCallback	XtCCallback	XtRCallback
XtNcancelCallback	XtCCallback	XtRCallback
.sp 6p
_
.TE

.NH 3
SessionPart Default Values
.XS
\*(SN SessionPart Default Values
.XE
.LP
The default values for the Session instance fields, which are filled in
from the resource lists and by the initialize procedure, are
.LP
.TS
lw(1.5i) lw(4.25i) .
_
.sp 6p
Field	Default Value
.sp 6p
_
.sp 6p
connection	(SmcConn) NULL
session_id	see description below
T{
restart_command
T}	T{
contents of \fIargv\fP, as passed to
.PN XtDisplayInitialize
T}
T{
clone_command
T}	T{
same contents of \fIargv\fP, without a session id
T}
discard_command	(String *) NULL
resign_command	(String *) NULL
shutdown_command	(String *) NULL
environment	(String *) NULL
current_directory	(String) NULL
restart_style	XtRestartIfRunning
save_callbacks	NULL
die_callbacks	NULL
cancel_callbacks	NULL
.sp 6p
_
.TE
.LP
The connection field contains the session connection ID for the session
participant.  
If a connection ID is not passed at widget creation time, and a session
manager is present, a new connection to the session manager will be
established.
.LP
The default value of the \fIsession_id\fP is taken from the value of the 
xtsessionID command line option.  
If none is specified, after a connection is established the session id
assigned by the session manager is stored
in the \fIsession_id\fP resource field.
If no session participation can be established, the default value is NULL.
.LP
In
.PN Intrinsic.h ,
as the possible values of the XtNrestartStyle resource:
.sp
.Ds 0
.TA 2i
.ta 2i
#define XtRestartIfRunning	0
#define XtRestartAnyway	1
#define XtRestartImmediately	2
.De
.LP
For a description of the session properties, see the ``X Session Management
Protocol'' document.
.LP
For a description of the callback lists, see this chapter.

.NH 3
Use of Session Objects
.XS
\fB\*(SN Use of Session Objects\fP
.XE
.LP
The Session Object is used to represent a participant in the user's session.
It has no display semantics.  Typically it is created as a child of the
ApplicationShell widget, but there are no semantics attached to the choice
of a parent.
.bp
