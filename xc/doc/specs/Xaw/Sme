.NH 2
Sme Object
.LP
.XS
\*(SN Sme Object
.XE
.IN "Sme object" "" "@DEF@"
.sp
.Ds 0
.TA 2.0i
.ta 2.0i
Header file	Sme.h
Class		smeObjectClass
Class Name	Sme
Superclass	RectObj
.De
.sp
.LP
The Sme object is the base class for all menu entries.  While this
object is mainly intended to be subclassed, it may be used in a menu to
add blank space between menu entries.  
.NH 3
Resources
.IN "SmeLine object" "resources"
.LP
The resources associated with the SmeLine object are defined in this section,
and affect only the single menu entry specified by this object.  There
a no new resources added for this class, it pickes up all its
resources from the RectObj class.
.ps 9
.nr PS 9
.vs 11
.nr VS 11
.TS H
lw(1.5i) lw(1i) lw(1i) lw(2i).
_
.sp 3p
.TB
Name	Class	Type	Default Value
.sp 3p
_
.TH
.R
.sp 3p
ancestorSensitive	AncestorSensitive	Boolean	True
borderWidth	BorderWidth	Boolean	1
destroyCallback	Callback	XtCallbackList	NULL
height	Height	Dimension	0
sensitive	Sensitive	Boolean	True
width	Width	Dimension	1
.sp 3p
_
.TE
.ps 11
.nr PS 11
.vs 13
.nr VS 13
.IP ancestorSensitive 1.5i
The sensitivity state of the ancestors of this object.  A object is
insensitive if either it or any of its ancestors is insensitive.
This resource is not settable with \fBXtSetValues\fP.  It may
however be queried.
.IP borderWidth 1.5i
This is the width of the border of this widget's window.
Although none of the currently defined menu entry objects use this
resource, widget programmers who create new menu entries may feel free
to use it.
.IP destroyCallback 1.5i
All callback functions on this list are called when this object is destroyed.
.IP height 1.5i
.br
.ns
.IP width 1.5i
The height and width of this object in pixels.  Keep in mind that the
SimpleMenu widget will force all menu items to be the width of the
widest entry.  
.IP sensitive 1.5i
Whether of not this menu entry may be selected. 
.IP x 1.5i
.br
.ns
.IP y 1.5i
The location of the upper left corner of this object with respect
to its parent's window.
.NH 3
Subclassing the Sme Object
.IN "Sme object" "Subclassing" "@DEF"
.LP
.sp
To Create a new Sme object you will need to define a few class procedures.
These proceedures allow the SimpleMenu to highlight, and unhighlight the
menu entry as the mouse pointer moves over it, as well as notifying the
entry when the user has selected it.
.LP
There are three new class methods defined by the Sme Object.
All of these methods may be inherited from the Sme object, although the
default semantics are not very interesting.
.IP \fBHighlight\fP(\|) 1i
Called when the SimpleMenu wishes to notify the user that this menu
entry is ready to be selected.
.IP \fBUnhighlight\fP(\|) 1i
Called to return the widget to its normal (unhighlighted) state.
.IP \fBNotify\fP(\|) 
Called when the user selects this menu entry.
.LP
.sp
Other then these specialized class procedures creating a new object
should be straight forward.  It is just a matter of subclassing
Sme and defining your own redisplay and highlight procedures.  Here are
some tips to remember.
.IP 1) .5i
Objects can be zero pixels high.
.IP 2) .5i
Objects draw on their parents window, so, for instance, the y
locations you should use vary from \fBy\fP to \fBy + height\fP, not \fB0\fP to
\fBheight\fP. 
.IP 3) .5i
SetValues calls may come from the application when in the notify
proceedure, you will get an \fBunhighlight\fP after this, but before
the expose event generated by \fBXtSetValues\fP so be careful.
.IP 4) .5i
Remember you do not own the window, be sure to share the space with other
menu entries.  Never draw outside your own section of the menu.

