.NH 2
Toggle Widget
.LP
.XS
\*(SN Toggle Widget
.XE
.IN "Toggle widget" "" "@DEF@"

The Toggle widget is a rectanglular button that contains a text label
or pixmap.  This widget maintains a Boolean state (e.g. True/False or
On/Off) and changes state whenever it is selected. When the pointer
cursor is on the Toggle it highlights to indicate that the Toggle is
available for selection.  When the pointer button is pressed the
Toggle is selected. This causes the state of the Toggle to reverse
and its callback routine to be invoked. 
.LP
Toggle buttons may also be part of a radio group.  A radio group is a
list of Toggle buttons in which only one Toggle may be set at any
time.  A radio group is identified by giving the widget id of any one
of its members.  There is a convenience routine,
.PN XtToggleGetCurrent
that will return information about the Toggle in the radio group that is
currently set.  More information on radio groups is presented below.
.LP
The class variable for the Toggle widget is 
.PN toggleWidgetClass .
.LP
When creating a Toggle widget instance, 
the following resources are retrieved from the argument list
or from the resource database:
.IN "Toggle widget" "resources"
.ps 9
.nr PS 9
.vs 11
.nr VS 11
.TS H
lw(1.5i) lw(1i) lw(1i) lw(2i).
_
.sp 3p
.TB
Name	Type	Default	Description
.sp 3p
_
.TH
.R
.sp 3p
XtNbackground	Pixel	XtDefaultBackground	Window background color
XtNbackgroundPixmap	Pixmap	None	Window background pixmap
T{
XtNbitmap
T}	T{
Pixmap	
T}	T{
None
T}	T{
Pixmap to display in place of the label
T}
XtNborderColor	Pixel	XtDefaultForeground	Window border color
XtNborderPixmap	Pixmap	None	Window border pixmap
XtNborderWidth	Dimension	1	Width of button border
XtNcallback	XtCallbackList	NULL	Callback for button select
XtNcursor	Cursor	None	Pointer cursor
T{
XtNdestroyCallback
T}	T{
XtCallbackList
T}	T{
NULL
T}	T{
Callbacks for 
.PN XtDestroyWidget
T}
XtNfont	XFontStruct*	XtDefaultFont	Label font
XtNforeground	Pixel	XtDefaultForeground	Foreground color
XtNheight	Dimension	Text height	Button height
T{
XtNhighlightThickness
T}	T{
Dimension
T}	T{
2
T}	T{
Width of border to be highlighted
T}
XtNinsensitiveBorder	Pixmap	Gray	Border when not sensitive
T{
XtNinternalHeight
T}	T{
Dimension
T}	T{
2
T}	T{
Internal border height for highlighting
T}
T{
XtNinternalWidth
T}	T{
Dimension
T}	T{
4
T}	T{
Internal border width for highlighting
T}
XtNjustify	XtJustify	XtJustifyCenter	Type of text alignment
XtNlabel	String	Button name	Button label
T{
XtNmappedWhenManaged
T}	T{
Boolean
T}	T{
True
T}	T{
Whether 
.PN XtMapWidget
is automatic
T}
XtNradioData	Pointer	Name of widget	Value that will be returned by \fBXtToggleGetCurrent\fP
XtNradioGroup	Widget	NULL	Any other widget in the Toggle's radio group
XtNresize	Boolean	True	Whether to auto-resize in \fBSetValues\fP
XtNsensitive	Boolean	True	Whether widget receives input
XtNstate	Boolean	Off	State of the Toggle widget
XtNtranslations	TranslationTable	see below	Event-to-action translations
XtNwidth	Dimension	Text width	Button width
XtNx	Position	0	x coordinate
XtNy	Position	0	y coordinate
.sp 3p
_
.TE
.ps 11
.nr PS 11
.vs 13
.nr VS 13
.TS
lw(1.7i) lw(4i).
T{
.PN XtNbitmap
T}	T{
Specifies a bitmap to display in place of the text label
[See the description of this resource in the Label widget for
further details].
T}
.sp 6p
T{
.PN XtNcallback
T}	T{
Specifies the callback list of functions to be called when the 
Toggle widget changes state.  This usually occurs when the Toggle
widget's notify action is called, but when a toggle is in a radio
group it may change state at other times.  The places where 
this can occur include:
.PN XtToggleSetCurrent , 
.PN XtToggleUnsetCurrent ,
.PN XtToggleChangeRadioGroup ,
the 
.PN set
action, 
.PN XtSetValues, 
and
.PN XtCreateWidget.
T}
.sp 6p
T{
.PN XtNheight
T}	T{
Specifies the height of the Toggle widget.
The default value is the minimum height that will contain:
.br
\fBXtNinternalheight\fP + height of \fBXtNlabel\fP + \fBXtNinternalHeight\fP
.br
If the specified height is larger than the minimum,
the label string is centered vertically.
T}
.sp 6p
T{
.PN XtNinternalHeight 
T}	T{
Represents the distance in pixels between the top and bottom 
of the label text or bitmap and the horizontal edges of the Toggle widget.
HighlightThickness can be larger or smaller than this value.
T}
.sp 6p
T{
.PN XtNinternalWidth 
T}	T{
Represents the distance in pixels between the ends of the label text
or bitmap and the vertical edges of the Toggle widget.
HighlightThickness can be larger or smaller than this value.
T}
.sp 6p
T{
.PN XtNjustify
T}	T{
Specifies left, center, or right alignment of the label string
within the Toggle widget.
If it is specified within an
.PN ArgList ,
one of the values
.PN XtJustifyLeft ,
.PN XtJustifyCenter ,
or
.PN XtJustifyRight
can be specified.
In a resource of type ``string'',
one of the values ``left'', ``center'', or ``right'' can be specified.
T}
.sp 6p
T{
.PN XtNlabel
T}	T{
Specifies the text string that is to be displayed in the Toggle widget
if no bitmap is specified.
The default is the widget name of the Toggle widget.
T}
.sp 6p
T{
.PN XtNradioData
T}	T{
Specifies the data that will be returned from a call to 
.PN XtToggleGetCurrent
if this widget is the one that is set in a radio group.  This data is
also used to identify the toggle that will be set by a call to
.PN XtToggleSetCurrent.
The value NULL is returned by
.PN XtToggleGetCurrent
if no widget is set in a radio group.  Programmers not 
specify NULL as \fBXtNradioData\fP, if they intend to use
\fBXtToggleGetCurrent\fP
T}
.sp 6p
T{
.PN XtNradioGroup
T}	T{
Specifies another Toggle widget which is in the radio group to which this
Toggle widget should be added. A radio group is a group of Toggle widgets,
only one of which may be "set" at a time.  If this value is NULL (the default)
then the Toggle will not be part of any radio group and can
change state without effecting any other Toggle widgets.  If the
widget specified in this resource is not already in a radio group
then a new radio group will be created containing these two
Toggle widgets.  No Toggle widget can be in multiple radio groups.
T}
.sp 6p
T{
.PN XtNresize
T}	T{
Specifies whether the Toggle widget should attempt to resize to its
preferred dimensions whenever
.PN XtSetValues
is called for it.
The default is
.PN True .
T}
.sp 6p
T{
.PN XtNsensitive
T}	T{
If set to
.PN False ,
the Toggle widget will change its window border to
.PN XtNinsensitiveBorder
and will stipple the label string.
T}
.sp 6p
T{
.PN XtNstate
T}	T{
Specifies whether the Toggle widget is set (True/On) or unset (False/Off).
T}
.sp 6p
T{
.PN XtNwidth
T}	T{
Specifies the width of the Toggle widget.
The default value is the minimum width that will contain:
.br
\fBXtNinternalwidth\fP + width of \fBXtNlabel\fP + \fBXtNinternalWidth\fP
.br
If the width is larger or smaller than the minimum,
.PN XtNjustify 
determines how the label string is aligned.
T}
.TE
.LP
The Toggle widget supports the following actions:
.IP \(bu 5
Switching the button between the foreground and background
colors with \fBset\fP, \fBunset\fP and \fBtoggle\fP
.IP \(bu 5
Processing application callbacks with \fBnotify\fP.
.IP \(bu 5
Switching the internal border between highlighted
and unhighlighted states with \fBhighlight\fP and \fBunhighlight\fP
.LE
.LP
The following are the default translation bindings that are used 
by the Toggle widget:
.LP
.Ds 0
.TA .5i 2.25i
.ta .5i 2.25i
	<EnterWindow>:	highlight(Always)
	<LeaveWindow>:	unhighlight(\|)
	<Btn1Down>,<Btn1Up>:	toggle(\|) notify(\|)
.De
.LP
With these bindings, the user can cancel the action before
releasing the button by moving the pointer out of the Toggle widget.
.NH 3
Toggle Actions
.LP
The full list of actions supported by the Toggle widget is:
.IP \fBhighlight\fP(\fIvalue\fP) 1.5i
Displays the internal highlight border in the color (\fBXtNforeground\fP
or
.PN XtNbackground )
that contrasts with the interior color of the Toggle widget.
This action procedure takes one of the following conditions: WhenUnset and
Always.  If no argument is passed then WhenUnset is assumed, this maintains
backwards compatibility.
.IP \fBunhighlight\fP(\|) 1.5i
Displays the internal highlight border in the color (\fBXtNforeground\fP
or
.PN XtNbackground )
that matches the interior color of the Toggle widget. 
.IP \fBset\fP(\|) 1.5i
Enters the "set" state, in which \fBnotify\fP is possible and displays the
interior of the button in the
.PN XtNforeground
color.  The label is displayed
in the 
.PN XtNbackground
color.  If the widget to be set is in a radio
group then this procedure may unset another widget, which will
cause all routines on its callback list to be invoked.  Since only one
toggle in a radio group may be set at a time the callback routines for
the toggle that is to be unset will be called before the one that 
is to be set.
.IP \fBunset\fP(\|) 1.5i
Cancels the "set" state and displays the interior of the button in the
.PN XtNbackground
color.  The label is displayed in the 
.PN XtNforeground
color.
.IP \fBtoggle\fP(\|) 1.5i
Changes the current state of the Toggle widget, causing to be set
if it was previously unset, and unset if it was previously set.
If the widget is to be set, and is in a radio group then this procedure may 
unset another widget, which will cause all routines on its callback list
to be invoked.   Since only one toggle in a radio
group may be set at a time the callback routines for the toggle that
is to be unset will be called before the one that is to be set.
.IP \fBreset\fP(\|) 1.5i
Cancels any \fBset\fP or \fBhighlight\fP and displays the interior of the
button in the
.PN XtNbackground
color, with the label displayed in the 
.PN XtNforeground
color.   
.IP \fBnotify\fP(\|) 1.5i
Executes the
.PN XtNcallback
callback list.  The call_data contains a Boolean which is
the current state of the widget.
.LP
.IN "Toggle widget" "creating"
.IN "Creating widgets" "Toggle"
To create a Toggle widget instance, use
.PN XtCreateWidget
and specify the class variable
.PN toggleWidgetClass .
.LP
.IN "Toggle widget" "destroying"
.IN "Destroying widgets" "toggle"
To destroy a Toggle widget instance, use
.PN XtDestroyWidget
and specify the widget ID of the Toggle widget.
.LP
The Toggle widget supports two callbacks:
.PN XtNdestroyCallback
and
.PN XtNcallback .
The notify action executes the callbacks on the the
.PN XtNcallback
list.
.SH
Changing the Toggle's Radio Group.
.LP
To enable an application to change the Toggle's current radio group, add
the Toggle to a radio group, or remove the Toggle from a radio group, use 
.PN XtToggleChangeRadioGroup.
.IN ""XtToggleChangeRadioGroup"" "@DEF@"
.sp 6p
void XtToggleChangeRadioGroup(\fIw\fP, \fIradio_group\fP)
.br
     Widget \fIw\fP, \fIradio_group\fP;
.FN
.IP \fIw\fP 1i
Specifies the widget ID of the Toggle widget.
.IP \fIradio_group\fP 1i
This should be any Toggle on the new radio group.  If NULL then the Toggle
will be removed from any radio group of which it is a member.
.LP
If a toggle is already in the set state in the new radio group,
and the toggle to be added is also set then the previously set toggle in
the new radio group is unset and its callback procedures are 
invoked.
.SH
Finding the Currently selected Toggle in a radio group of Toggles
.LP
To find the currently selected Toggle in a radio group of Toggle widgets
use 
.PN XtToggleGetCurrent.
.IN ""XtToggleGetCurrent"" "@DEF@"
.sp 6p
caddr_t XtToggleGetCurrent(\fIradio_group\fP);
.br
     Widget \fIradio_group\fP;
.FN
.IP \fIradio_group\fP 1i
Specifies the widget ID of any Toggle in the radio group.
.LP
The value returned by this function is the data pointed to by 
.PN XtNradioData, 
for the Toggle in the radio group that is currently set.  The default
value for 
.PN XtNradioData 
is the name of that Toggle widget.  If no Toggle 
is set in the radio group specified then NULL is returned.
.SH
Changing the Toggle that is set in a radio group.
.LP
To change the Toggle that is currently set in a radio group use 
.PN XtToggleSetCurrent.
.IN ""XtToggleSetCurrent"" "@DEF@"
.sp 6p
void XtToggleSetCurrent(\fIradio_group\fP, \fIradio_data\fP);
.br
     Widget \fIradio_group\fP;
     caddr_t \fIradio_data\fP;
.FN
.IP \fIradio_group\fP 1i
Specifies the widget ID of any Toggle in the radio group.
.IP \fIradio_data\fP 1i
Specifies the 
.PN XtNradioData
identifying the Toggle that should be set in the radio group specified
by the \fIradio_group\fP argument.
.LP

\fBXtToggleSetCurrent\fP locates the Toggle widget to be set by
matching \fIradio_data\fP against the \fBXtNradioData\fP for each
Toggle in the radio group.  If none match \fBXtToggleSetCurrent\fP
returns without making any changes.  If more than one Toggle matches,
\fBXtToggleSetCurrent\fP will choose a Toggle to set arbitrarily.  If
this causes any Toggle widgets to change state all routines in their
callback lists will be invoked.  Since only one toggle in a radio
group may be set at a time the callback routines for a Toggle that
is to be unset will be called before the one that is to be set.

.SH
Unsetting all Toggles in a radio group.
.LP
To unset all Toggle widgets in a radio group use
.PN XtToggleUnsetCurrent.
.IN ""XtToggleUnsetCurrent"" "@DEF@"
.sp 6p
void XtToggleUnsetCurrent(\fIradio_group\fP);
.br
     Widget \fIradio_group\fP;
.FN
.IP \fIradio_group\fP 1i
Specifies the widget ID of any Toggle in the radio group.
.LP
If this causes a Toggle widget to change state all routines on its 
callback list will be invoked.
