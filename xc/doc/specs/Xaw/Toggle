.NH 2
Toggle Widget
.XS
\*(SN Toggle Widget
.XE
.IN "Toggle widget" "" "@DEF@"
.Ds 0
.TA 2.0i
.ta 2.0i
.sp
Header file	<Xaw/Toggle.h>
Class		toggleWidgetClass
Class Name	Toggle
Superclass 	Command
.sp
.De
.LP
The Toggle widget is an area, often rectangular, that contains a text
label or bitmap image.  This widget maintains a Boolean state (e.g.
True/False or On/Off) and changes state whenever it is selected.  When
the pointer is on the button, the button becomes highlighted by
drawing a rectangle around its perimeter.  This highlighting indicates
that the button is ready for selection.  When the left mouse button is
pressed the Toggle widget changes state, and its callback routine is
invoked.
.LP
Toggle buttons may also be part of a radio group.  A radio group is a
list of Toggle buttons in which no more than one Toggle may be set at
any time.  A radio group is identified by the widget id of any one of
its members.  There is a convenience routine, \fBXawToggleGetCurrent\fP
that will return information about the Toggle button in the radio group
that is currently set.  More information on radio groups is presented
below.
.LP
When creating a Toggle widget instance, the following resources are
retrieved from the argument list or from the resource database: 
.ps 9
.nr PS 9
.vs 11
.nr VS 11
.TS H
lw(1.5i) lw(1i) lw(1i) lw(2i).
_
.sp 3p
.TB
Name	Class	Type	Default Value
.sp 3p
_
.TH
.R
.sp 3p
accelerators	Accelerators	AcceleratorTable	NULL
ancestorSensitive	AncestorSensitive	Boolean	True
background	Background	Pixel	XtDefaultBackground
backgroundPixmap	Pixmap	Pixmap	XtUnspecifiedPixmap
bitmap	Bitmap	Pixmap	None
borderColor	BorderColor	Pixel	XtDefaultForeground
borderPixmap	Pixmap	Pixmap	XtUnspecifiedPixmap
borderWidth	BorderWidth	Dimension	1
callback	Callback	XtCallbackList	NULL
colormap	Colormap	Pointer	Parent's Colormap
cornerRoundPercent	CornerRoundPercent	Dimension	25
cursor	Cursor	Cursor	None
depth	Depth	int	Parent's Depth
destroyCallback	Callback	XtCallbackList	NULL
font	Font	XFontStruct	XtDefaultFont
foreground	Foreground	Pixel	XtDefaultForeground
height	Height	Dimension	Font height + 2 * \fBinternalHeight\fP
highlightThickness	Thickness	Dimension 2	(0 if Shaped)
insensitiveBorder	Insensitive	Pixmap	GreyPixmap
internalHeight	Height	Dimension	2
internalWidth	Width	Dimension	4
justify	Justify	Justify	XtJustifyCenter (center)
label	Label	String	NULL (name of widget)
mappedWhenManaged	MappedWhenManaged	Boolean	True
radioData	RadioData	Pointer	Name of widget
radioGroup	Widget	Widget	NULL (No radio Group)
resize	Resize	Boolean	True
screen	Screen	Pointer	Parent's Screen
sensitive	Sensitive	Boolean	True
shapeStype	ShapeStyle	ShapeStyle	Rectangle
state	State	Boolean	Off
translations	Translations	TranslationTable	See above
width	Width	Dimension	\fBlabel\fP width + 2 * \fBinternalWidth\fP
x	X	Position	0
y	Y	Position	0
.sp 3p
_
.TE
.ps 11
.nr PS 11
.vs 13
.nr VS 13
.IP accelerators 1.5i
A list of event to action bindings to be executed by this widget, even
though the event occurred in another widget.  See Section 10.4 in the
\fI\*(xT\fP.
.IP ancestorSensitive 1.5i
The sensitivity state of the ancestors of this widget.  A widget is
insensitive if either it or any of its ancestors is insensitive.
This resource should not be changed with \fBXtSetValues\fP.  It may,
however, be queried.
.IP background 1.5i
An index into this widget's colormap specifying the background color of the
widget's window.
.IP backgroundPixmap 1.5i
The background pixmap of this widget's window.  If this resource is set to
anything other than \fBXtUnspecifiedPixmap\fP, the pixmap specified will be
used instead of the background color.
.IP bitmap 1.5i
A bitmap to display instead of a label.  The default size of the widget
will be just large enough to contain the bitmap and the widget's
internal width and height.  The resource converter for this resource
constructs bitmaps from the contents of files, given a file name.  See
\fBConverting Bitmaps\fP for details on the string to bitmap conversion.
If this bitmap is one plane deep then the 1's will be rendered in the
foreground color, and the 0's in the background color.  If \fBbitmap\fP
has a depth equal to the depth resource, it is copied directly into the
window.
.IP borderColor 1.5i
An index into this widget's colormap specifying the border color of the
widget's window.
.IP borderPixmap 1.5i
The border pixmap of this widget's window.  If this resource is set to
anything other than \fBXtUnspecifiedPixmap\fP, the pixmap specified will be
used instead of the border color.
.IP borderWidth 1.5i
The width of this widget's window border.
.IP \fBcallback\fP 1.5i
A list of routines to be called when the \fBnotify\fP action is invoked.
.IP colormap 1.5i
The colormap that this widget will use.
.IP \fBcornerRoundPercent\fP 1.5i
When a \fBShapeStyle\fP of \fBroundedRectangle\fP is used, this
resource controls the radius of the rounded corner.  The radius of the
rounded corners is specified as a percentage of the length of the
shortest side of the widget.
.IP cursor 1.5i
The cursor that will be displayed as the pointer, whenever the pointer
is in this widget.
.IP depth 1.5i
The depth of this widget's window.
.IP destroyCallback 1.5i
All functions on this list are called when this widget is destroyed.
.IP font 1.5i
The text font to use when displaying the \fBlabel\fP.
.IP foreground 1.5i
The color index to be used to draw the \fBlabel\fP.  This color is also
used to render all 1's in a \fBbitmap\fP one plane deep.
.IP height 1.5i
.br
.ns
.IP width 1.5i
The height and width of this widget in pixels.
.IP \fBhighlightThickness\fP 1.5i
The thickness of the rectangle that is used to highlight the internal
border of this widget, alerting the user that it is ready to be
selected.  The default value is 2 pixels if the \fBshapeStyle\fP is
\fBrectangle\fP, and 0 Pixels (no highlighting) otherwise.
.IP insensitiveBorder 1.5i
This pixmap will be tiled into the widget's border if it becomes
insensitive.
.IP internalHeight 1.5i
.br
.ns
.IP internalWidth 1.5i
The minimum amount of space to leave between the \fBlabel\fP or
\fBbitmap\fP and the vertical and horizontal edges of the window.
.IP justify 1.5i
Specifies left, center, or right alignment of the label within the
widget.  This resource may be specified with the values
\fBXtJustifyLeft\fP, \fBXtJustifyCenter\fP, or \fBXtJustifyRight\fP.
When specifying the justification from a resource file the values
\fBleft\fP, \fBcenter\fP, or \fBright\fP may be used.  This resource
only has noticable effect when the width of the widget is larger than
necessary.
.IP label 1.5i
Specifies the Latin1 text string to be displayed in the widget's window
if no bitmap is specified.  The default is the widget name of the Toggle
widget.  Newline characters will cause line breaks.
.IP mappedWhenManaged 1.5i
If this resource is \fBTrue\fP then the widget's window will
automatically be mapped by the Toolkit when it is realized and managed.
.IP \fBradioData\fP 1.5i
Specifies the data that will be returned from a call to
\fBXawToggleGetCurrent\fP if this is the currently \fIset\fP widget in
the radio group.  This data is also used to identify the Toggle that
will be set by a call to \fBXawToggleSetCurrent\fP.  The value NULL is
returned by \fBXawToggleGetCurrent\fP if no widget is set in a radio
group.  Programmers must not specify NULL (or Zero) as \fBradioData\fP,
if they intend to use \fBXawToggleGetCurrent\fP
.IP \fBradioGroup\fP 1.5i
Specifies another Toggle widget that is in the radio group to which this
Toggle widget should be added.  A radio group is a group of Toggle
widgets, only one of which may be \fIset\fP at a time.  If this value is
NULL (the default) then the Toggle will not be part of any radio group
and can change state without affecting any other Toggle widgets.  If the
widget specified in this resource is not already in a radio group then a
new radio group will be created containing these two Toggle widgets.  No
Toggle widget can be in multiple radio groups.
.IP resize 1.5i
Specifies whether the Toggle widget should attempt to resize to its
preferred dimensions whenever its resources are modified with
\fBXtSetValues\fP.  This attempt to resize may be denied by the parent
of this widget.  Also, the parent is free to resize the widget
regardless of the state of this resource.
.IP shapeStyle 1.5i
Nonrectangular Toggles may be created using this resource.
Nonrectangular buttons are supported only on a server that supports the
\fBShape Extension\fP.  If nonrectangular Toggle widgets are specified
for a server lacking this extension, the shape is ignored and the
widgets will be rectangular.  The Toggle currently supports the following
shapes: \fBXmuShapeRectangle\fP, \fBXmuShapeOval\fP,
\fBXmuShapeEllipse\fP, and \fBXmuShapeRoundedRectangle\fP.  When
specifying shape styles from a resource file, a resource converter is
registered to convert the following string values to shape styles:
\fBrectangle\fP, \fBoval\fP, \fPellipse\fP, \fBroundedRectangle\fP.
.IP screen 1.5i
The screen on which this widget is displayed.  This is not a settable
resource.
.IP sensitive 1.5i
Whether or not the toolkit will pass user events to this widget.  The
widget will not get input events if either \fBancestorSensitive\fP or 
\fBsensitive\fP is \fBFalse\fP.
.IP \fBstate\fP
Specifies whether the Toggle widget is set (\fBTrue\fP) or unset
(\fBFalse\fP).
.IP translations 1.5i
The event bindings associated with this widget.
.IP x 1.5i
.br
.ns
.IP y 1.5i
The location of the upper left outside corner of this widget in its parent.
.NH 3
Toggle Actions
.LP
The Toggle widget supports the following actions:
.IP \(bu 5
Switching the button between the foreground and background
colors with \fBset\fP and \fBunset\fP and \fBtoggle\fP
.IP \(bu 5
Processing application callbacks with \fBnotify\fP
.IP \(bu 5
Switching the internal border between highlighted
and unhighlighted states with \fBhighlight\fP and \fBunhighlight\fP
.LE
.LP
The following are the default translation bindings used by the
Toggle widget: 
.LP
.sp
.Ds 0
.TA .5i 2.25i
.ta .5i 2.25i
	<EnterWindow>:	highlight(Always)
	<LeaveWindow>:	unhighlight(\|)
	<Btn1Down>,<Btn1Up>:	toggle(\|) notify(\|)
.De
.NH 3
Toggle Actions
.LP
The full list of actions supported by Toggle is:
.IP \fBhighlight\fP(\fIcondition\fP) 1.5i
Displays the internal highlight border in the color (\fBforeground\fP
or \fBbackground\fP ) that contrasts with the interior color of the
Toggle widget.  The conditions \fBWhenUnset\fP or \fBAlways\fP are
understood by this action procedure.  If no argument is passed then
\fBWhenUnset\fP is assumed, maintaining backwards compatibility.
.IP \fBunhighlight\fP(\|) 1.5i
Displays the internal highlight border in the color (\fBforeground\fP
or \fBbackground\fP ) that matches the interior color of the
Toggle widget.  
.IP \fBset\fP(\|) 1.5i
Enters the \fIset\fP state, in which \fBnotify\fP is possible.  This
action causes the button to display its interior in the
\fBforeground\fP color.  The label or bitmap is displayed in the
\fBbackground\fP color. 
.IP \fBunset\fP(\|) 1.5i
Cancels the \fIset\fP state and displays the interior of the button in the
\fBbackground\fP color.  The label or bitmap is displayed in the
\fBforeground\fP color.
.IP \fBtoggle\fP(\|) 1.5i
Changes the current state of the Toggle widget, causing to be set
if it was previously unset, and unset if it was previously set.
If the widget is to be set, and is in a radio group then this procedure may 
unset another Toggle widget causing all routines on its callback list
to be invoked.  The callback routines for the Toggle that
is to be unset will be called before the one that is to be set.
.IP \fBreset\fP(\|) 1.5i
Cancels any \fBset\fP or \fBhighlight\fP and displays the interior of the
button in the \fBbackground\fP color, with the label displayed in the 
\fBforeground\fP color.
.IP \fBnotify\fP(\|) 1.5i
When the button is in the \fBset\fP state this action calls all functions in
the callback list named by the \fBcallback\fP resource.  The value of
the call_data argument in these callback functions is undefined. 
.NH 3
Radio Groups
.LP
There are typically two types of radio groups desired by applications.
The default translations for the Toggle widget implement a "zero or one
of many" radio group.  This means that there may be no more than one
button active, but there need not be any buttons active.
.LP
The other type of radio group is "one of many" and has the more strict
policy that there will always be exactly one radio button active.  The
Toggle widgets can be used to provide this interface with a slight
modification to the translation table in each of the Toggle widgets in
the group.
.Ds 0
.TA .5i 2.25i
.ta .5i 2.25i
.sp
	<EnterWindow>:	highlight(Always)
	<LeaveWindow>:	unhighlight(\|)
	<Btn1Down>,<Btn1Up>:	set(\|) notify(\|)
.sp
.De
This translation table will not allow any Toggle to be \fIunset\fP
except as a result of another Toggle becoming \fIset\fP.  It is
the application programmer's responsibility to choose an initial
state for the radio group by setting one of its member widget's
\fBstate\fP resource to \fBTrue\fP.
.NH 3
Convenience Routines
.LP
The following functions allow easy access to the Toggle widget's radio
group functionality.
.NH 4
Changing the Toggle's Radio Group.
.LP
To enable an application to change the Toggle's radio group, add
the Toggle to a radio group, or remove the Toggle from a radio group, use 
.PN XawToggleChangeRadioGroup.
.IN ""XawToggleChangeRadioGroup"" "@DEF@"
.sp 6p
void XawToggleChangeRadioGroup(\fIw\fP, \fIradio_group\fP)
.br
     Widget \fIw\fP, \fIradio_group\fP;
.FN
.IP \fIw\fP 1i
Specifies the widget ID of the Toggle widget.
.IP \fIradio_group\fP 1i
Any Toggle in the new radio group.  If NULL then the Toggle
will be removed from any radio group of which it is a member.
.LP
If a Toggle is already in \fIset\fP in the new radio group,
and the Toggle to be added is also \fIset\fP then the previously
\fIset\fP Toggle in the new radio group is \fIunset\fP and its callback
procedures are invoked.
.SH
Finding the Currently selected Toggle in a radio group of Toggles
.LP
To find the currently selected Toggle in a radio group of Toggle widgets
use 
.PN XawToggleGetCurrent.
.IN ""XawToggleGetCurrent"" "@DEF@"
.sp 6p
caddr_t XawToggleGetCurrent(\fIradio_group\fP);
.br
     Widget \fIradio_group\fP;
.FN
.IP \fIradio_group\fP 1i
Specifies the widget ID of any Toggle in the radio group.
.LP
The value returned by this function is the
.PN radioData, 
of the Toggle in this radio group that is currently set.  The default
value for 
.PN radioData 
is the name of that Toggle widget.  If no Toggle 
is set in the radio group specified then NULL is returned.
.SH
Changing the Toggle that is set in a radio group.
.LP
To change the Toggle that is currently set in a radio group use 
.PN XawToggleSetCurrent.
.IN ""XawToggleSetCurrent"" "@DEF@"
.sp 6p
void XawToggleSetCurrent(\fIradio_group\fP, \fIradio_data\fP);
.br
     Widget \fIradio_group\fP;
     caddr_t \fIradio_data\fP;
.FN
.IP \fIradio_group\fP 1i
Specifies the widget ID of any Toggle in the radio group.
.IP \fIradio_data\fP 1i
Specifies the 
.PN radioData
identifying the Toggle that should be set in the radio group specified
by the \fIradio_group\fP argument.
.LP
\fBXawToggleSetCurrent\fP locates the Toggle widget to be set by
matching \fIradio_data\fP against the \fBradioData\fP for each Toggle in
the radio group.  If none match, \fBXawToggleSetCurrent\fP returns
without making any changes.  If more than one Toggle matches,
\fBXawToggleSetCurrent\fP will choose a Toggle to set arbitrarily.  If
this causes any Toggle widgets to change state, all routines in their
callback lists will be invoked.  The callback routines for a Toggle that
is to be unset will be called before the one that is to be set.
.SH
Unsetting all Toggles in a radio group.
.LP
To unset all Toggle widgets in a radio group use
.PN XawToggleUnsetCurrent.
.IN ""XawToggleUnsetCurrent"" "@DEF@"
.sp 6p
void XawToggleUnsetCurrent(\fIradio_group\fP);
.br
     Widget \fIradio_group\fP;
.FN
.IP \fIradio_group\fP 1i
Specifies the widget ID of any Toggle in the radio group.
.LP
If this causes a Toggle widget to change state, all routines on its
callback list will be invoked.
.TC
