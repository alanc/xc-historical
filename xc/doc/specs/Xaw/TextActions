.NH 2
Text Widget Actions.
.LP
.XS
\*(SN Actions Supported by all Text Widgets
.XE
.IN "Actions" "Text Widgets" "@DEF@"
.IN "Text Widgets" "Actions" "@DEF@"

The Actions supported by the text widgets are:
.LP
.sp
.Ds 0
.TA .5i	2.5i 3i
.ta .5i 2.5i 3i
Insert Point Movement	Delete
	forward-character		delete-next-character
	backward-character		delete-previous-character
	forward-word		delete-next-word
	backward-word		delete-previous-word
	forward-paragraph		delete-selection
	backward-paragraph
	beginning-of-line
	end-of-line	Selection
	next-line		select-word
	previous-line		select-all
	next-page		select-start
	previous-page		select-adjust
	beginning-of-file		select-end
	end-of-file		extend-start
	scroll-one-line-up		extend-adjust
	scroll-one-line-down		extend-end
			insert-selection


Miscellaneous	New Line		
	redraw-display		newline-and-indent
	insert-file		newline-and-backup
	insert-char		newline	
	insert-string	
	display-caret
	focus-in	Kill
	focus-in		kill-word
	search			backword-kill-word
	multiply		kill-selection
	form-paragraph		kill-to-end-of-line
	transpose-characters		kill-paragraph
	no-op		kill-to-end-of-paragraph
.De
.sp
.LP
The following list is a detailed description of all the actions
provided by the text widgets.  Most of these actions take no
arguments, and unless otherwise noted you may assume this to be the
case.  
.LP
.NH 3
The Movement Actions\fP
.LP
.sp
.IP forward-character(\|) 2.0i
.br
.ns
.IP backward-character(\|) 2.0i
These actions move the insert point forward or backward one
character in the file.  If the insert point is at the end or beginning of a
line this action will move the insert point to the next (or previous) line.
.IP forward-word(\|) 2.0i
.br
.ns
.IP backward-word(\|) 2.0i
These actions move the insert point to the next or previous word boundary.
A word boundary is defined as a Space, Tab or Carriage Return.
.IP forward-paragraph(\|) 2.0i
.br
.ns
.IP backward-paragraph(\|) 2.0i
These actions move the insert point to the next or previous paragraph boundary.
A paragraph boundary is defined as two Carriage Returns in a row with only
Spaces or Tabs between them.
.IP beginning-of-line(\|) 2.0i
.br
.ns
.IP end-of-line(\|) 2.0i
These actions move to the beginning or end of the current line.  If the
insert point is already at the end or beginning of the line then no action is taken.
.IP next-line(\|) 2.0i
.br
.ns
.IP previous-line(\|) 2.0i
These actions move the insert point up or down one line.  If the insert point is
currently N characters from the beginning of the line then it will
be N characters from the beginning of the next or previous line.  This
currently causes problems with tabs.  If N is past the end of the line
the the insert point is placed at the end of the line.
.IP next-page(\|) 2.0i
.br
.ns
.IP previous-page(\|) 2.0i
These actions move the insert point up or down one page in the file.  One page
is defined as the current height of the text widget.  So in a text
widget that is 10 lines high, one page is 10 lines.  The
insert point is always placed at the first character of a line by this action.
.IP beginnig-of-file(\|) 2.0i
.br
.ns
.IP end-of-file(\|) 2.0i
These actions place the insert point at the beginning or end of the
current text buffer.  The text widget is then scrolled the minimum
amount necessary to make the new insert point location visible.
.IP scroll-one-line-up(\|) 2.0i
.br
.ns
.IP scroll-one-line-down(\|) 2.0i
These actions scroll the current text field up or down by one line.  They
do not move the insert point.  Other than the scrollbars this is the only
way that the insert point may be moved off of the visible text area.  The widget
will be scrolled so that the insert point is back on the screen as soon as some
other action is executed.
.NH 3
The Delete Actions
.LP
.sp
.IP delete-next-character(\|) 2.0i
.br
.ns
.IP delete-previous-character(\|) 2.0i
These actions remove the character immediately before or after the 
insert point.  If a Carriage Return is removed then the next line is
appended to the end of the current line.
.IP delete-next-word(\|) 2.0i
.br
.ns
.IP delete-previous-word(\|) 2.0i
These actions remove all characters between the insert point location and
the next word boundary.  Word boundary is defined in the 
\fIforward-word\fP action.
.IP delete-selection(\|) 2.0i
This action removes all characters in the current selection.
The selection can be set with the selection actions.
.NH 3
The Selection Actions
.LP
.sp
.IP select-word(\|) 2.0i
This action will select the word the insert point is currently on.  If the insert point is
between words then it will select the previous word.
.IP select-all(\|) 2.0i
This action selects the entire text buffer.
.IP select-start(\|) 2.0i
This action will set the insert point location to location in the window where
the event occurred.  If this event is bound to a mouse button then the \fImouse
pointer\fP location is used.  It will then begin a selection at this location.
If many of these selection actions occur quickly in sucession then the
selection count mechanism will be invoked (see the section titled
\fBText Selections for Application Programmers\fP for details).
.IP select-adjust(\|) 2.0i
This action allows a selection started with the \fIselect-start\fP
action to be modified.
.IP select-end(\fIname\fP[,\fIname\fP,...]) 2.0i
This action ends a text selection that began with the
\fIselect-start\fP action, and asserts ownership of
the selection or selections specified.  A \fIname\fP can be
a selection (e.g. \fBPRIMARY\fP) or a cut buffer (e.g
\fBCUT_BUFFER0\fP).  Note that case is important.  If no
names are given, PRIMARY is asserted.
.IP extend-start(\|) 2.0i
This action finds the nearest end of the current selection, and moves
it to the location in which the event occurred.  If this event is bound
to a mouse button then the \fImouse pointer\fP location is used.  The
selection can then be modified until an \fIextend-end\fP action occurs.
.IP extend-adjust(\|) 2.0i
This action allows a selection started with an \fIextend-start\fP
action to be modified.
.IP extend-end(\fIname\fP[,\fIname\fP,...]) 2.0i
This action ends a text selection that began with the
\fIextend-start\fP action, and asserts ownership of
the selection or selections specified.  A \fIname\fP can be
a selection (e.g. \fBPRIMARY\fP) or a cut buffer (e.g
\fBCUT_BUFFER0\fP).  Note that case is important.  If no
names are given, PRIMARY is asserted.
.IP insert-selection(\fIname\fP[,\fIname\fP,...]) 2.0i
Retrieves the value of the first (left-most) named selection that
exists or the cut buffer that is not empty and inserts it into the
text widget at the current insert point location. A \fIname\fP can be a
selection (e.g. \fBPRIMARY\fP) or a cut buffer (e.g
\fBCUT_BUFFER0\fP).  Note that case is important.
.NH 3
The New Line Actions
.LP
.sp
.IP newline-and-indent(\|) 2.0i
This action inserts a newline into the text and adds spaces to
that line to indent it to match the previous line [ This action is
still a bit buggy ].
.IP newline-and-backup(\|) 2.0i
This action inserts a newline into the text \fIafter\fP the insert point.
.IP newline(\|) 2.0i
This action inserts a newline into the text \fIbefore\fP the insert point.
.NH 3
Kill and Actions
.LP
.sp
.IP kill-word(\|) 2.0i
.br
.ns
.IP backword-kill-word(\|) 2.0i
These actions act exactly like the \fIdelete-next-word\fP and
\fIdelete-previous-word\fP actions, but they stuff the word that was
killed into the kill buffer (X Cut Buffer 1).
.IP kill-selection(\|) 2.0i
This action deletes the current selection and stuffs the results into
the kill buffer (X Cut Buffer 1).
.IP kill-to-end-of-line(\|) 2.0i
This action deletes the entire line to the right of the insert point position.
It then stuffs this result into the kill buffer (X Cut Buffer 1).
.IP kill-paragraph(\|) 2.0i
This action deletes the current paragraph, and if between paragraphs deletes
the paragraph above the insert point.
It then stuffs the deleted text into the kill buffer (X Cut Buffer 1).
.IP kill-to-end-of-paragraph(\|) 2.0i
This action deletes everything between the current insert point location and
the next paragraph boundary.
It then stuffs the deleted text into the kill buffer (X Cut Buffer 1).
.NH 3
Miscellaneous Actions
.LP
.sp 1
.IP redraw-display(\|) 2.0i
This action recomputes the location of all the text lines on the
display, scrolls the text to vertically center the line containing the insert point
on the screen, clears the entire screen, and redisplays it.
.IP insert-file([\fIfilename\fP]) 2.0i
This action activates the insert file popup.  The \fIfilename\fP
option specifies the default filename to put in the filename buffer of
the popup.  If no \fIfilename\fP is specified the the buffer is empty
at startup.
.IP insert-char(\|) 2.0i
This action may only be attached to a key event. It
calls XLookupString to translate the event into a (rebindable) Latin-1
character (sequence) and inserts that sequence into the text at the 
insert point position.
.IP insert-string(\fIstring\fP[,\fIstring\fP,...]) 2.0i
This action inserts each \fIstring\fP into the text at the
insert point position.  Any \fIstring\fP beginning with the characters "0x" 
and containing only
valid hexadecimal digits in the remainder is interpreted as a hexadecimal
constant and the corresponding single character is inserted instead.
.IP display-caret(\fIstate\fP,\fIwhen\fP) 2.0i
This action allows the insert point to be turned on and off.
The \fIstate\fP argument specifies the desired state of the insert point.
This value may be any of the string
values accepted for Boolean resources (e.g. \fBon\fP, \fBTrue\fP,
\fBoff\fP, \fBFalse\fP, etc.).  If no arguments are specified, the
default value is \fBTrue\fP. 
The \fIwhen\fP argument specifies, for \fBEnterNotify\fP or \fBLeaveNotify\fP
events whether or not the focus field in the event is to be examined.
If the second argument is not specified, or specified as something other
than \fBalways\fP then if the action is bound to an  \fBEnterNotify\fP
or \fBLeaveNotify\fP event, the action will be taken only if the focus
field is \fBTrue\fP.  An augmented binding that might be useful is:
.LP
.Ds 0
.TA .2.0i 2.5i 4.0i
.ta .2.0i 2.5i 4.0i
	*Text.Translations: #override \\
		<FocusIn>:	display-caret(on) \\n\\
		<FocusOut>:	display-caret(off)
.De
.IP focus-in(\|) 2.0i
.br
.ns
.IP focus-out(\|) 2.0i
These actions do not currently do anything.
.IP search(\fIdirection\fP,[\fIstring\fP]) 2.0i
This action activates the search popup.  The \fIdirection\fP must be
specified as either \fBforward\fP or \fBbackward\fP.  The string is
optional and is used as an initial value for the \fISearch for\fP: string.
For further explanation of the search widget see the section on
\fBText Searches\fP.
.IP multiply(\fIvalue\fP) 2.0i
The multiply action allows the user to multiply the effects of many of
the text actions.  Thus the folowing action sequence
\fImultiply(10) delete-next-word()\fP will delete 10 words.  It does not
matter whether these actions take place in one event or many events.
Using the default translations the key sequence \fIControl-u,
Control-d\fP will delete 4 characters.  
Multiply actions can be chained, thus \fImultiply(5)
multiply(5)\fP is the same as \fImultiply(25)\fP.  If the string
\fBreset\fP is passed to the multiply action the effects of all previous
multiplies are removed and a beep is sent to the display.
.IP form-paragraph(\|) 2.0i
This action will remove all the Carriage Returns from the current
paragraph and reinsert them so that each line is as long as possible, but
will still fit on the current screen.  Lines are broken at word boundaries if 
at all possible.  This action will currently only work with text widgets
that use ASCII text.
.IP transpose-characters(\|) 2.0i
This action will swap the position of the character to the left of the
insert point with the character to the right of the insert point.  The insert point will then
be advanced one character.  
.IP no-op([\fIaction\fP]) 2.0i
The no-op action makes no change to the text widget, and is mainly useful
when used when overriding translations to remove a specific translation from
the Text widget.  This action takes one optional argument.  If this argument 
is \fIRingBell\fP then a beep is sent to the display.
.NH 3
Text Selections for Application Programmers
.IN "text widgets" "Text Selections for Application Programmers"
.LP
The default behavior of the text selection array is described in the
section called \fBText Selections for Users\fP.  This behavior is
settable, and the following section describes how to modify the
selection array.
\fBXtNselectionTypes\fP is an array of entries of type \fBXawTextSelectType\fP
and is used for multiclick.  As the pointer button is clicked in rapid
succession, each click highlights the next \fItype\fP described in the array.
.TS
lw(1.25i) lw(4.25i).
T{
\fBXawselectAll\fP
T}	T{
Selects the contents of the entire buffer.
T}
.sp 6p
T{
\fBXawselectChar\fP
T}	T{
Selects text characters as the pointer moves over them.
T}
.sp 6p
T{
\fBXawselectLine\fP
T}	T{
Selects the entire line.
T}
.sp 6p
T{
\fBXawselectNull\fP
T}	T{
Indicates the end of the selection array.
T}
.sp 6p
T{
\fBXawselectParagraph\fP
T}	T{
Selects the entire paragraph (delimited by newline characters).
T}
.sp 6p
T{
\fBXawselectPosition\fP
T}	T{
Selects the current pointer position.
T}
.sp 6p
T{
\fBXawselectWord\fP
T}	T{
Selects whole words (delimited by whitespace) as the pointer moves onto
them.
T}
.TE
.LP
The default selectType array is:
.LP
.sp
.Ds 0
{XawselectPosition, XawselectWord, XawselectLine, XawselectParagraph, XawselectAll, XawselectNull}
.De
.sp
.LP
If the timeout value (1/10 of a second) is exceeded, the next
\fIselect-start\fP action returns to the first entry in the selection
array.  The selection array is not copied by the text widgets.  The
client must allocate space for the array and cannot deallocate or
change it until the text widget is destroyed or until a new selection
array is set.
.NH 2
Default Translation Bindings
.IN "text widgets" "Default Translations"
.LP
.sp
.Ds 0
.TA .5i 2.5i
.ta .5i 2.5i
char defaultTextTranslations[] = ``\\
	Ctrl<Key>A:	beginning-of-line(\|) \\n\\
	Ctrl<Key>B:	backward-character(\|) \\n\\
	Ctrl<Key>D:	delete-next-character(\|) \\n\\
	Ctrl<Key>E:	end-of-line(\|) \\n\\
	Ctrl<Key>F:	forward-character(\|) \\n\\
	Ctrl<Key>G:	multiply(Reset) \\n\\
	Ctrl<Key>H:	delete-previous-character(\|) \\n\\
	Ctrl<Key>J:	newline-and-indent(\|) \\n\\
	Ctrl<Key>K:	kill-to-end-of-line(\|) \\n\\
	Ctrl<Key>L:	redraw-display(\|) \\n\\
	Ctrl<Key>M:	newline(\|) \\n\\
	Ctrl<Key>N:	next-line(\|) \\n\\
	Ctrl<Key>O:	newline-and-backup(\|) \\n\\
	Ctrl<Key>P:	previous-line(\|) \\n\\
	Ctrl<Key>R:	search(backward) \\n\\
	Ctrl<Key>S:	search(forward) \\n\\
	Ctrl<Key>T:	transpose-characters(\|) \\n\\
	Ctrl<Key>U:	multiply(4) \\n\\
	Ctrl<Key>V:	next-page(\|) \\n\\
	Ctrl<Key>W:	kill-selection(\|) \\n\\
	Ctrl<Key>Y:	insert-selection(CUT_BUFFER1) \\n\\
	Ctrl<Key>Z:	scroll-one-line-up(\|) \\n\\
	Meta<Key>B:	backward-word(\|) \\n\\
	Meta<Key>F:	forward-word(\|) \\n\\
	Meta<Key>I:	insert-file(\|) \\n\\
	Meta<Key>K:	kill-to-end-of-paragraph(\|) \\n\\
	Meta<Key>Q:	form-paragraph(\|) \\n\\
	Meta<Key>V:	previous-page(\|) \\n\\
	Meta<Key>Y:	insert-selection(PRIMARY, CUT_BUFFER0) \\n\\
	Meta<Key>Z:	scroll-one-line-down(\|) \\n\\
	:Meta<Key>d:	delete-next-word(\|) \\n\\
	:Meta<Key>D:	kill-word(\|) \\n\\
	:Meta<Key>h:	delete-previous-word(\|) \\n\\
	:Meta<Key>H:	backward-kill-word(\|) \\n\\
	:Meta<Key>\\<:	beginning-of-file(\|) \\n\\
	:Meta<Key>\\>:	end-of-file(\|) \\n\\
	:Meta<Key>]:	forward-paragraph(\|) \\n\\
	:Meta<Key>[:	backward-paragraph(\|) \\n\\
	~Shift Meta<Key>Delete:		delete-previous-word(\|) \\n\\
	\ Shift Meta<Key>Delete:		backward-kill-word(\|) \\n\\
	~Shift Meta<Key>Backspace:	delete-previous-word(\|) \\n\\
	\ Shift Meta<Key>Backspace:	backward-kill-word(\|) \\n\\
	<Key>Right:	forward-character(\|) \\n\\
	<Key>Left:	backward-character(\|) \\n\\
	<Key>Down:	next-line(\|) \\n\\
	<Key>Up:	previous-line(\|) \\n\\
	<Key>Delete:	delete-previous-character(\|) \\n\\
	<Key>BackSpace:	delete-previous-character(\|) \\n\\
	<Key>Linefeed:	newline-and-indent(\|) \\n\\
	<Key>Return:	newline(\|) \\n\\
	<Key>:		insert-char(\|) \\n\\
	<FocusIn>:	focus-in(\|) \\n\\
	<FocusOut>:	focus-out(\|) \\n\\
	<Btn1Down>:	select-start(\|) \\n\\
	<Btn1Motion>:	extend-adjust(\|) \\n\\
	<Btn1Up>:	extend-end(PRIMARY, CUT_BUFFER0) \\n\\
	<Btn2Down>:	insert-selection(PRIMARY, CUT_BUFFER0) \\n\\
	<Btn3Down>:	extend-start(\|) \\n\\
	<Btn3Motion>:	extend-adjust(\|) \\n\\
	<Btn3Up>:	extend-end(PRIMARY, CUT_BUFFER0) \\
'';
.De
