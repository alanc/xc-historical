.LE
.NH 2
Command Widget
.LP
.XS
\*(SN Command Widget
.XE
.IN "Command widget" "" "@DEF@"
The Command widget is a rectangular button that contains a text or
pixmap label.
When the pointer cursor is on the button,
the button border is highlighted to indicate that the button is available 
for selection.
Then, when a pointer button is pressed and released
the button is selected, 
and the application's callback routine is invoked.
.LP
The class variable for the Command widget is 
.PN commandWidgetClass .
.LP
When creating a Command widget instance, 
the following resources are retrieved from the argument list
or from the resource database:
.IN "Command widget" "resources"
.ps 9
.nr PS 9
.vs 11
.nr VS 11
.TS H
lw(1.5i) lw(1i) lw(1i) lw(2i).
_
.sp 3p
.TB
Name	Type	Default	Description
.sp 3p
_
.TH
.R
.sp 3p
XtNbackground	Pixel	XtDefaultBackground	Window background color
XtNbackgroundPixmap	Pixmap	None	Window background pixmap
T{
XtNbitmap
T}	T{
Pixmap	
T}	T{
None
T}	T{
Pixmap to display in place of the label
T}
XtNborderColor	Pixel	XtDefaultForeground	Window border color
XtNborderPixmap	Pixmap	None	Window border pixmap
XtNborderWidth	Dimension	1	Width of button border
XtNcallback	XtCallbackList	NULL	Callback for button select
XtNcursor	Cursor	None	Pointer cursor
T{
XtNdestroyCallback
T}	T{
XtCallbackList
T}	T{
NULL
T}	T{
Callbacks for 
.PN XtDestroyWidget
T}
XtNfont	XFontStruct*	XtDefaultFont	Label font
XtNforeground	Pixel	XtDefaultForeground	Foreground color
XtNheight	Dimension	Text height	Button height
T{
XtNhighlightThickness
T}	T{
Dimension
T}	T{
2
T}	T{
Width of border to be highlighted
T}
XtNinsensitiveBorder	Pixmap	Gray	Border when not sensitive
T{
XtNinternalHeight
T}	T{
Dimension
T}	T{
2
T}	T{
Internal border height for highlighting
T}
T{
XtNinternalWidth
T}	T{
Dimension
T}	T{
4
T}	T{
Internal border width for highlighting
T}
XtNjustify	XtJustify	XtJustifyCenter	Type of text alignment
XtNlabel	String	Button name	Button label
T{
XtNmappedWhenManaged
T}	T{
Boolean
T}	T{
True
T}	T{
Whether 
.PN XtMapWidget
is automatic
T}
XtNresize	Boolean	True	Whether to auto-resize in SetValues
XtNsensitive	Boolean	True	Whether widget receives input
XtNtranslations	TranslationTable	see below	Event-to-action translations
XtNwidth	Dimension	Text width	Button width
XtNx	Position	0	x coordinate
XtNy	Position	0	y coordinate
.sp 3p
_
.TE
.ps 11
.nr PS 11
.vs 13
.nr VS 13
.LP
The new resources associated with the Command widget are:
.TS
lw(1.5i) lw(4i).
T{
.PN XtNbitmap
T}	T{
Specifies a bitmap to display in place of the text label.
See the description of this resource in the Label widget for
further details.
T}
.sp 6p
T{
.PN XtNheight
T}	T{
Specifies the height of the Command widget.
The default value is the minimum height that will contain:
.br
XtNinternalheight + height of XtNlabel + XtNinternalHeight 
.br
If the specified height is larger than the minimum,
the label string is centered vertically.
T}
.sp 6p
T{
.PN XtNinternalHeight 
T}	T{
Represents the distance in pixels between the top and bottom 
of the label text or bitmap and the horizontal edges of the Command widget.
HighlightThickness can be larger or smaller than this value.
T}
.sp 6p
T{
.PN XtNinternalWidth 
T}	T{
Represents the distance in pixels between the ends of the label text
or bitmap and the vertical edges of the Command widget.
HighlightThickness can be larger or smaller than this value.
T}
.sp 6p
T{
.PN XtNjustify
T}	T{
Specifies left, center, or right alignment of the label string
within the Command widget.
If it is specified within an
.PN ArgList ,
one of the values
.PN XtJustifyLeft ,
.PN XtJustifyCenter ,
or
.PN XtJustifyRight
can be specified.
In a resource of type ``string'',
one of the values ``left'', ``center'', or ``right'' can be specified.
T}
.sp 6p
T{
.PN XtNlabel
T}	T{
Specifies the text string that is to be displayed in the Command widget
if no bitmap is specified.
The default is the widget name of the Command widget.
T}
.sp 6p
T{
.PN XtNresize
T}	T{
Specifies whether the Command widget should attempt to resize to its
preferred dimensions whenever
.PN XtSetValues
is called for it.
The default is
.PN True .
T}
.sp 6p
T{
.PN XtNsensitive
T}	T{
If set to
.PN False ,
the Command widget will change its window border to
.PN XtNinsensitiveBorder
and will stipple the label string.
T}
.sp 6p
T{
.PN XtNwidth
T}	T{
Specifies the width of the Command widget.
The default value is the minimum width that will contain:
.br
XtNinternalWidth + width of XtNlabel + XtNinternalWidth 
.br
If the width is larger or smaller than the minimum,
.PN XtNjustify 
determines how the label string is aligned.
T}
.TE
.LP
The Command widget supports the following actions:
.IP \(bu 5
Switching the button between the foreground and background
colors with \fBset\fP and \fBunset\fP
.IP \(bu 5
Processing application callbacks with \fBnotify\fP
.IP \(bu 5
Switching the internal border between highlighted
and unhighlighted states with \fBhighlight\fP and \fBunhighlight\fP
.LE
.LP
The following are the default translation bindings that are used 
by the Command widget:
.LP
.Ds 0
.TA .5i 2.25i
.ta .5i 2.25i
	<EnterWindow>:	highlight(\|)
	<LeaveWindow>:	reset(\|)
	<Btn1Down>:	set(\|)
	<Btn1Up>:	notify(\|) unset(\|)
.De
.LP
With these bindings, the user can cancel the action before
releasing the button by moving the pointer out of the Command widget.
.NH 3
Command Actions
.LP
The full list of actions supported by Command is:
.IP \fBhighlight\fP(\fIcondition\fP) 1.5i
Displays the internal highlight border in the color (\fBXtNforeground\fP
or
.PN XtNbackground )
that contrasts with the interior color of the Command widget.
This action procedure takes one of the following conditions: WhenUnset and
Always.  If no argument is passed then WhenUnset is assumed, this maintains
backwards compatibility.
.IP \fBunhighlight\fP(\|) 1.5i
Displays the internal highlight border in the color (\fBXtNforeground\fP
or
.PN XtNbackground )
that matches the interior color of the Command widget. 
.IP \fBset\fP(\|) 1.5i
Enters the "set" state, in which \fBnotify\fP is possible and displays the
interior of the button in the
.PN XtNforeground
color.  The label is displayed
in the 
.PN XtNbackground
color.
.IP \fBunset\fP(\|) 1.5i
Cancels the "set" state and displays the interior of the button in the
.PN XtNbackground
color.  The label is displayed in the 
.PN XtNforeground
color.
.IP \fBreset\fP(\|) 1.5i
Cancels any \fBset\fP or \fBhighlight\fP and displays the interior of the
button in the
.PN XtNbackground
color, with the label displayed in the 
.PN XtNforeground
color.
.IP \fBnotify\fP(\|) 1.5i
Executes the
.PN XtNcallback
callback list if executed in the \fBset\fP state.  The value of the call_data
argument is undefined.
.LP
.IN "Command widget" "creating"
.IN "Creating widgets" "Command"
To create a Command widget instance, use
.PN XtCreateWidget
and specify the class variable
.PN commandWidgetClass .
.LP
.IN "Command widget" "destroying"
.IN "Destroying widgets" "Command"
To destroy a Command widget instance, use
.PN XtDestroyWidget
and specify the widget ID of the button.
.LP
The Command widget supports two callback lists:
.PN XtNdestroyCallback
and
.PN XtNcallback .
The notify action executes the callbacks on the
.PN XtNcallback
list.
The call_data
argument is unused.
