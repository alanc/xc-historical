.NH 2 
Scrollbar Widget
.LP
.XS
\*(SN Scrollbar Widget
.XE
.IN "Scrollbar widget" "" "@DEF@"
.Ds 0
.TA 2.0i
.ta 2.0i
.sp
Header file	Scroll.h
Class		scrollbarWidgetClass
Class Name	Scrollbar
Superclass	Core Widget
.sp
.De
.LP
The Scrollbar widget is a rectangular area that contains a slide region and 
a thumb (slide bar).
A Scrollbar can be used alone, as a valuator, or it can
be used within a composite widget (for example, a Viewport).
A Scrollbar can be aligned either vertically or horizontally.
.LP
When a Scrollbar is created, it is drawn with the thumb in a
contrasting color. The thumb is normally used to scroll client data
and to give visual feedback on the percentage of the client data that
is visible. 
.LP
Each pointer button invokes a specific scroll bar action.  That is,
given either a vertical or horizontal alignment, the pointer button
actions will scroll or return data as appropriate for that alignment.
Pointer buttons 1 and 3 do not perform scrolling operations by
default.  Instead, they return the pixel position of the cursor on the
scroll region.  When pointer button 2 is clicked, the thumb moves to
the current pointer position.  When pointer button 2 is held down and
the pointer pointer is moved, the thumb follows the pointer.
.LP
The cursor in the scroll region changes depending on the current
action.  When no pointer button is pressed, the cursor appears as an
arrow that points in the direction that scrolling can occur.  When
pointer button 1 or 3 is pressed, the cursor appears as a
single-headed arrow that points in the logical direction that the
client will move the data.  When pointer button 2 is pressed, the
cursor appears as an arrow that points to the thumb.
.LP
While scrolling is in progress, the application receives notification
from callback procedures.  For both scrolling actions, the callback
returns the Scrollbar widget ID, the client_data, and the pixel
position of the pointer when the button was released.  For smooth
scrolling, the callback routine returns the scroll bar widget, the
client data, and the current relative position of the thumb.  When the
thumb is moved using pointer button 2, the callback procedure is
invoked continuously.  When either button 1 or 3 is pressed, the
callback procedure is invoked only when the button is released and the
client callback procedure is responsible for moving the thumb.
.LP
When creating a Scrollbar widget instance, the following resources are
retrieved from the argument list or from the resource database:
.IN "Scrollbar widget" "resources"
.ps 9
.nr PS 9
.vs 11
.nr VS 11
.TS H
lw(1.5i) lw(1i) lw(1i) lw(2i).
_
.sp 3p
.TB
Name	Class	Type	Default Value
.sp 3p
_
.TH
.R
.sp 3p
accelerators	Acceleratore	AcceleratorTable	NULL
ancestorSensitive	AncestorSensitive	Boolean	True
background	Background	Pixel	XtDefaultBackground
backgroundPixmap	Pixmap	Pixmap	XtUnspecifiedPixmap
borderColor	BorderColor	Pixel	XtDefaultForeground
borderPixmap	Pixmap	Pixmap	XtUnspecifiedPixmap
borderWidth	BorderWidth	Dimension	1
colormap	Colormap	Pointer	Parent's Colormap
depth	Depth	int	Parent's Depth
destroyCallback	Callback	XtCallbackList	NULL
foreground	Foreground	Pixel	XtDefaultForeground
height	Height	Dimension	depends on orientation
jumpProc	Callback	Callback	NULL
length	Length	Dimension	1
mappedWhenManaged	MappedWhenManaged	Boolean	True
mimiumThumb	MiniumThumb	Dimension	7
orientation	Orientation	Orientation	XtOrientVertical (vertical)
screen	Screen	Pointer	Parent's Screen
scrollDCursor	Cursor	Cursor	XC_sb_down_arrow
scrollHCursor	Cursor	Cursor	XC_sb_h_double_arrow
scrollLCursor	Cursor	Cursor	XC_sb_left_arrow
scrollProc	Callback	Callback	NULL
scrollRCursor	Cursor	Cursor	XC_sb_right_arrow
scrollUCursor	Cursor	Cursor	XC_sb_up_arrow
scrollVCursor	Cursor	Cursor	XC_sb_v_arrow
sensitive	Sensitive	Boolean	True
shown	Shown	Float	0.0
thickness	Thickness	Dimension	14
thumb	Thumb	Pixmap	GreyPixmap
topOfScrollbar	TopOfScrollbar	Float	0.0
translations	Translations	TranslationTable	See above
width	Width	Dimension	depends on orientation
x	X	Position	0
y	Y	Position	0
.sp 3p
_
.TE
.ps 11
.nr PS 11
.vs 13
.nr VS 13
.IP accelerators 1.5i
A list of actions to be executed by this widget, even though the
event occurred in another widget.  See section 10.4 in the \fI\*(xT\fP.
.IP ancestorSensitive 1.5i
The sensitivity state of the ancestors of this widget.  A widget is
insensitive if either it or any of its ancestors is insensitive.
This resource is not settable with \fBXtSetValues\fP.  It may
however be queried.
.IP background 1.5i
The background color of this widget.
.IP backgroundPixmap 1.5i
The background pixmap of this widget.  If this resource is set to
anything other than \fBXtUnspecifiedPixmap\fP the pixmap specified will be
used instead of a background color.
.IP borderColor 1.5i
The color of this widget's border.
.IP borderPixmap 1.5i
The border pixmap of this widget.  If this resource is set to
anything other than \fBXtUnspecifiedPixmap\fP the pixmap specified will be
used instead of a background color.
.IP borderWidth 1.5i
This is the width of the border of this widget's window.
.IP colormap 1.5i
The colormap that this widget will use to display all of its colors.
.IP depth 1.5i
The depth of this widget's window.
.IP destroyCallback 1.5i
All callback functions on this list are called when this widget is destroyed.
.IP \fBforeground\fP 1.5i
The color of the thumb.
.IP height 1.5i
.br
.ns
.IP width 1.5i
The height and width of this widget in pixels.
.IP \fBjumpProc\fP 1.5i
All functions on this callback list are called when the
\fBNotifyThumb\fP action is invoked.  See the \fBScrollbar
Actions\fP section for details.
.IP \fBlength\fP 1.5i
The height of a vertical scrollbar or the width of a horizontal scrollbar.
.IP \fBminiumThumb\fP 1.5i
The smallest size, in pixels, to which thumb can shrink.
.IP mappedWhenManaged 1.5i
If this resource is \fBTrue\fP then the widget will automatically be
mapped by the Toolkit when it is realized and managed.
.IP \fBorientation\fP 1.5i
The orientation is the direction that the thumb will be allowed to move.
This value can be either \fBXtOrientVertical\fP or
\fBXtOrientHorizontal\fP.  A resource converter is registered that
will convert the strings \fBhorizontal\fP and \fBvertical\fP.
.IP \fBscrollDCursor\fP 1.5i
This cursor is used when scrolling backward in a vertical scrollbar.
.IP \fBscrollHCursor\fP 1.5i
This cursor is used when a horizontal scrollbar is inactive.
.IP \fBscrollLCursor\fP 1.5i
This cursor is used when scrolling forward in a horizonal scrollbar.
.IP \fBscrollProc\fP 1.5i
All functions on this callback list may be called when the
\fBNotifyScroll\fP action is invoked.  See the \fBScrollbar
Actions\fP section for details.
.IP \fBscrollRCursor\fP 1.5i
This cursor is used when scrolling backward in a horizonal scrollbar,
or when thumbing a vertical scrollbar.
.IP \fBscrollUCursor\fP 1.5i
This cursor is used when scrolling forward in a vertical scrollbar, or when
thumbing a horizontal scrollbar.
.IP \fBscrollVCursor\fP 1.5i
This cursor is used when a vertical scrollbar is inactive.
.IP screen 1.5i
The screen that this widget is displayed on.  This is not a settable resource.
.IP sensitive 1.5i
Whether or not the toolkit will pass events to this widget.  The
widget will not get events if either \fBancestorSensitive\fP or 
\fBsensitive\fP is \fBFalse\fP.
.IP \fBshown\fP 1.5i
This is the size of the thumb, expressed as a percentage (0.0 - 1.0)
of the length of the scrollbar. 
.IP \fBthickness\fP 1.5i
The width of a vertical scrollbar or the height of a horizontal scrollbar.
.IP \fBthumb\fP 1.5i
This pixmap is used to tile (or stipple) the thumb of the scrollbar.
If no tiling is desired then set this resource to \fBNone\fP.  This
resource will accept either a bitmap or a pixmap that is the same
depth as the window.  The resource converter for this resource
converts a filename into a bitmap.  See \fBConverting Bitmaps\fP for
details on the string to bitmap conversion.
.IP \fBtopOfThumb\fP 1.5i
This the location of the top of the thumb, as a percentage (0.0 - 1.0)
of the length of the scrollbar.  This resource was called \fBtop\fP in 
previous versions of the Athena widget set.  The name collided with the
a Form widget constraint resource, and had to be changed.
.IP translations 1.5i
The translations associated with this widget.
.IP x 1.5i
.br
.ns
.IP y 1.5i
The location of the upper lefthand corner of this widget in its parent.
.NH 3 
Scrollbar Actions
.LP
The actions supported by the Scrollbar widget are:
.IP \fBStartScroll\fP(\fIvalue\fP) 1.5i
The possible values are Forward, Backward, or Continuous.
This must be the first action to begin a new movement.
.IP \fBNotifyScroll\fP(\fIvalue\fP) 1.5i
The possible values are Proportional or FullLength.
If the argument to StartScroll was Forward or Backward,
NotifyScroll executes the
.PN scrollProc
callbacks 
and passes either the position of the pointer if its argument is Proportional
or the full length of the scroll bar if its argument is FullLength.
If the argument to StartScroll was Continuous,
NotifyScroll returns without executing any callbacks.
.IP \fBEndScroll\fP(\^) 1.5i
This must be the last action after a movement is complete.
.IP \fBMoveThumb\fP(\^) 1.5i
Repositions the scroll bar thumb to the current pointer location.
.IP \fBNotifyThumb\fP(\^)\ \ \  1.5i
Calls the
.PN jumpProc
callbacks and passes the relative position of the
pointer as a percentage of the scroll bar length.
.LP
.sp
The default bindings for Scrollbar are:
.LP
.Ds 0
.TA .5i 1.75i
.ta .5i 1.75i
	<Btn1Down>:	StartScroll(Forward)
	<Btn2Down>:	StartScroll(Continuous) MoveThumb(\|) NotifyThumb(\|)
	<Btn3Down>:	StartScroll(Backward)
	<Btn2Motion>:	MoveThumb(\|) NotifyThumb(\|)
	<BtnUp>:	NotifyScroll(Proportional) EndScroll(\|)
.De
.LP
.sp
Examples of additional bindings a user might wish to specify in a
resource file are:
.LP
.Ds 0
.TA .5i 2.25i
.ta .5i 2.25i
*Scrollbar.Translations: \\
	~Meta<KeyPress>space:	StartScroll(Forward) NotifyScroll(FullLength) \\n\\
	 Meta<KeyPress>space:	StartScroll(Backward) NotifyScroll(FullLength) \\n\\
		EndScroll(\|)
.De
.NH 3
Scrollbar Callbacks
.LP
There are two callback lists provided by the Scrollbar widget.
The procedural interface for this functions is described here.
.LP
The calling interface to the \fBscrollProc\fP callback procedure is:
.IN "ScrollProc" "" "@DEF@"
.FD 0
void \fIScrollProc\fP(\fIscrollbar\fP, \fIclient_data\fP, \fIposition\fP)
.br
     Widget \fIscrollbar\fP;
.br
     caddr_t \fIclient_data\fP;
.br
     caddr_t \fIposition\fP;    /* int */
.FN
.IP \fIscrollbar\fP 1i
Specifies the widget ID of the Scrollbar.
.IP \fIclient_data\fP 1i
Specifies the client data.
.IP \fIposition\fP 1i
Returns the pixel position of the thumb in integer form.
.LP
The \fBscrollProc\fP callback is used for incremental scrolling 
and is called by the \fBNotifyScroll\fP action.
The position argument is a signed quantity and should be cast to an int
when used. Using the default button bindings, button 1 returns a
positive value, and button 3 returns a negative value. In both cases,
the magnitude of the value is the distance of the pointer in pixels from the
top (or left) of the Scrollbar. The value will never be greater than
the length of the Scrollbar. 
.LP
.sp
The calling interface to the \fBjumpProc\fP callback procedure is:
.IN "JumpProc" "" "@DEF@"
.FD 0
void \fIJumpProc\fP(\fIscrollbar\fP, \fIclient_data\fP, \fIpercent\fP)
.br
     Widget \fIscrollbar\fP;
.br
     caddr_t \fIclient_data\fP;
.br
     caddr_t \fIpercent_ptr\fP;    /* float* */
.FN
.IP \fIscrollbar\fP 1i
Specifies the ID of the scroll bar widget.
.IP \fIclient_data\fP 1i
Specifies the client data.
.IP \fIpercent_ptr\fP 1i
Specifies the floating point position of the thumb (0.0 \- 1.0).
.LP
The \fBjumpProc\fP callback is used to implement smooth scrolling and
is called by the \fBNotifyThumb\fP action.  Percent_ptr must be cast
to a pointer to float before use; i.e.
.LP
.Ds 0
.TA .5i
.ta .5i
	float percent = *(float*)percent_ptr;
.De
.LP
With the default button bindings, button 2 moves the thumb interactively,
and the \fBjumpProc\fP is called on each new position of the pointer,
while the mouse button remains down.
.NH 3
Convience Routines
.LP
.IN "Scrollbar widget" "setting thumb values"
To set the position and length of a Scrollbar thumb, use 
.PN XawScrollbarSetThumb .
.IN "XawScrollbarSetThumb" "" "@DEF@"
.FD 0
void XawScrollbarSetThumb(\fIw\fP, \fItop\fP, \fIshown\fP)
.br
     Widget \fIw\fP;
.br
     float \fItop\fP;
.br
     float \fIshown\fP;
.FN
.IP \fIw\fP 1i
Specifies widget ID of the Scrollbar.
.IP \fItop\fP 1i
Specifies the position of the top of the thumb as a fraction of the
length of the Scrollbar.
.IP \fIshown\fP 1i
Specifies the length of the thumb as a fraction of the total length
of the Scrollbar.
.LP
.PN XawScrollbarThumb
moves the visible thumb to a new position (0.0 \- 1.0) and length (0.0 \- 1.0).
Either the top or shown arguments can be specified as \-1.0,
in which case the current value is left unchanged.
Values greater than 1.0 are truncated to 1.0.
.LP
If called from \fBjumpProc\fP, \fBXawScrollbarSetThumb\fP has no effect.
