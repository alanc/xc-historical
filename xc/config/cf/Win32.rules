XCOMM platform:  $XConsortium: Win32.rules,v 1.2 93/08/11 10:14:27 rws Exp $

#define ProgramTargetName(target) target.exe

#define MakeDir(dir) -$(MKDIRHIER) dir

#define BuildIncludes(srclist,dstsubdir,dstupdir)			@@\
includes::								@@\
	MakeDir($(BUILDINCDIR)/dstsubdir)				@@\
	for %%i in (srclist) do @<<tmp.bat %%i				@@\
	cd $(BUILDINCDIR)/dstsubdir					@@\
	$(RM) %1							@@\
	$(LN) $(BUILDINCTOP)/dstupdir/$(CURRENT_DIR)/%1 .		@@\
<<

#define LinkRule(program,options,objects,libraries) \
$(CCLINK) Concat(-Fe,program) options objects libraries $(EXTRA_LOAD_FLAGS)

#define NormalProgramTarget(program,objects,deplibs,locallibs,syslibs)	@@\
	OBJS = objects							@@\
									@@\
ProgramTargetName(program): $(OBJS:.o=.obj) deplibs			@@\
	RemoveTargetProgram($@)						@@\
	LinkRule($@,$(LDOPTIONS),$(OBJS:.o=.obj),locallibs $(LDLIBS) syslibs) @@\
									@@\
clean::									@@\
	$(RM) ProgramTargetName(program)

#define ProgramTargetHelper(program,srcs,objs,deplib,locallib,syslib)	@@\
ProgramTargetName(program): $(objs:.o=.obj) $(deplib)			@@\
	RemoveTargetProgram($@)						@@\
	LinkRule($@,$(LDOPTIONS),$(objs:.o=.obj),locallib $(LDLIBS) syslib) @@\
									@@\
InstallProgram(program,$(BINDIR))					@@\
InstallManPage(program,$(MANDIR))

#define ComplexProgramTarget(program)					@@\
        PROGRAM = ProgramTargetName(program)				@@\
									@@\
AllTarget(ProgramTargetName(program))					@@\
									@@\
ProgramTargetHelper(program,SRCS,OBJS,DEPLIBS,$(LOCAL_LIBRARIES),NullParameter) @@\
									@@\
DependTarget()								@@\
LintTarget()								@@\
									@@\
clean::									@@\
	$(RM) $(PROGRAM)

#define ComplexProgramTarget_1(program,locallib,syslib)			@@\
            OBJS = $(OBJS1) $(OBJS2) $(OBJS3)				@@\
            SRCS = $(SRCS1) $(SRCS2) $(SRCS3)				@@\
        PROGRAM1 = ProgramTargetName(program)				@@\
									@@\
AllTarget($(PROGRAM1) $(PROGRAM2) $(PROGRAM3))				@@\
									@@\
ProgramTargetHelper(program,SRCS1,OBJS1,DEPLIBS1,locallib,syslib)	@@\
									@@\
DependTarget()								@@\
LintTarget()								@@\
									@@\
clean::									@@\
	for %%i in ($(PROGRAMS)) do $(RM) ProgramTargetName(%%i)

#define ComplexProgramTarget_2(program,locallib,syslib)			@@\
        PROGRAM2 = ProgramTargetName(program)				@@\
									@@\
ProgramTargetHelper(program,SRCS2,OBJS2,DEPLIBS2,locallib,syslib)

#define ComplexProgramTarget_3(program,locallib,syslib)			@@\
        PROGRAM3 = ProgramTargetName(program)				@@\
									@@\
ProgramTargetHelper(program,SRCS3,OBJS3,DEPLIBS3,locallib,syslib)

#define MoveToBakFile(file) -@if exist file $(MV) file file.bak

#define RMoveToBakFile(file) -@if exist file.bak $(RM) file.bak		@@\
	-@if exist file $(MV) file file.bak

#define InstallMultipleDestFlags(step,list,dest,flags)			@@\
step:: list								@@\
	MakeDir($(DESTDIR)dest)						@@\
	-@for %%i in (list) do $(INSTALL) -c flags %%i $(DESTDIR)dest)

#define	CleanTarget()							@@\
clean::									@@\
	$(RM_CMD)

#define LibraryTargetName(libname) libname.lib

#define LibraryTargetNameSuffix(libname,suffix) Concat(libname,suffix.lib)

#define LibraryTargetNameDir(dir,libname) dir/libname.lib

#define MakeLibrary(libname,objlist) $(AR) -out:libname objlist

#define LibraryObjectRule()						@@\
all::									@@\
	_DebuggedLibMkdir()						@@\
	_ProfiledLibMkdir()						@@\
	_SharedLibMkdir()						@@\
									@@\
includes::								@@\
	_DebuggedLibMkdir()						@@\
	_ProfiledLibMkdir()						@@\
	_SharedLibMkdir()						@@\
									@@\
.c.obj:									@@\
	_DebuggedObjCompile($(_NOOP_))					@@\
	_ProfiledObjCompile($(_NOOP_))					@@\
	_SharedObjCompile($(_NOOP_))					@@\
	_NormalObjCompile($(_NOOP_))					@@\
									@@\
clean::									@@\
	_DebuggedCleanDir()						@@\
	_ProfiledCleanDir()						@@\
	_SharedCleanDir()						@@\

#define SpecialCLibObjectRule(basename,depends,options)			@@\
SpecialLibObjectRule(basename.obj,basename.c depends,options)

#define	NormalLibraryTarget3(libname,objlist1,objlist2,objlist3)	@@\
AllTarget(LibraryTargetName(libname))					@@\
									@@\
LibraryTargetName(libname): $(OBJS1:.o=.obj) $(OBJS2:.o=.obj) $(OBJS3:.o=.obj) @@\
	$(RM) $@							@@\
	MakeLibrary($@,$(OBJS1:.o=.obj))				@@\
	MakeLibrary($@,$(OBJS2:.o=.obj))				@@\
	MakeLibrary($@,$(OBJS3:.o=.obj))				@@\
	RanLibrary($@)
