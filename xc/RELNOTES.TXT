			     R6beta Release Notes
			      February 11, 1994

This distribution is for X Consortium members only.

Many companies and individuals have cooperated and worked extremely hard to
make this release a reality, and our thanks go out to them.  You will find
many of them listed in the acknowledgements in the individual specifications
that are out for public review.  Major implementation contributions come from
Digital, Fujitsu, HP, NCD, NCR, SGI, Sony, SunSoft, and the staff of the X
Consortium; many other individuals contributed smaller pieces of new
functionality and bug fixes.  The final release notes will contain
acknowledgements for all of these efforts.


1. Source tree reorganization

The first thing you may notice is that you can't find anything.  The source
tree has undergone a major reorganization.  Once you get used to the new
layout, things will be easier to find.  The reorganization has simplified
dependencies in the build process.

The general layout under xc/ (renamed from mit/) is now:

config/		config files, imake, makedepend, build utilities
doc/		all documentation other than per-program man pages
fonts/		bdf, Speedo, Type1 fonts
include/	include files shared by multiple directories
lib/		all libraries
nls/		localization files
programs/	all programs, including the X server
registry	X Registry
test/		X Test Suite and other test suites
util/		patch, compress, other utilities

The doc subtree has been reorganized since R6alpha.

Various filenames have been changed to minimize name conflicts on DOS
filesystems.  Conflicts remain for various header (.h) files.


2. Building the release

You presumably know the drill by now, so this will be brief.  Edit
xc/config/cf/site.def to suit your needs.  Check the appropriate
xc/config/cf/vendor.cf file to make sure that OSMajorVersion, OSMinorVersion,
and OsTeenyVersion are set correctly (change them if necessary).

On NT, type
     nmake World.Win32 > world.log
On other systems, find the BootstrapCFlags line, if any, in the vendor.cf
file.  If there isn't one, type
     make World >& world.log
otherwise type
     make World BOOTSTRAPCFLAGS="value" >& world.log

The following vendor.cf files are in the release but have not been used here
and hence probably need changes to work: DGUX.cf, Mips.cf, apollo.cf, bsd.cf,
convex.cf, moto.cf, pegasus.cf, x386.cf.

The file xc/lib/Wraphelp.c, for XDM-AUTHORIZATION-1, is not included in this
release.  The file is available within the US; get /pub/R5/xdm-auth/README
from ftp.x.org via anonymous ftp.


3. Documentation

In general, don't be surprised if the documentation is not up to date with the
implementation.  Some of the man pages have been revised, some have not.


4. Bugs

We have fixed a lot of bugs, but there are still a fair number we haven't
fixed.  We hope to fix many more bugs before the final release.  The open bug
database is included in this release as bugs/.

Please send bug reports about this release to xbugs@x.org.


5. Operating Systems

We compiled this release on the following systems.

A/UX 3.0.1
AIX 3.2.5
BSD/386 1.0
HP-UX 9.1
IRIX 5.1.1.1
Mach 2.5 Vers 2.00.1
Microsoft Windows NT 3.1
NCR Unix System V Release 4/MP-RAS
NEWS-OS 6.0
OSF/1 1.3
OSF/1 1.0
SunOS 4.1.3
SunOS 5.3
UNICOS 8.0
UNIX System V/386 Release 4.2 Version 1
Unix System V/860 Release 4.0 Version 3
Ultrix-32 4.3

We have only done spot testing of the executables on some of these.  There are
a fair number of compiler warnings generated on some systems; we hope to
eliminate more of them by final.

On SunOS 5.2 and 5.3, if you compile the libraries with threads support, you
will need to compile thread stubs to get around OS library bugs.  The stubs
are in xc/util/misc/thr_stubs.c.  Compile it and create libthr_stubs.a in that
directory.  You'll have to manually install it if you try to build programs
from "outside" our source tree; we'll fix this for the final release.


5. Windows NT support

The release should build with the Microsoft SDK.  No Fresco, twm (missing lex
and yacc), xterm, xdm, xconsole, xinit, xhost, xsm, or X server.  Xt, Xaw, and
Xmu libraries are not built as DLLs, due to DLL brain damage.  Imake works,
albeit with some restrictions.


6. Configuration files

The configuration files have changed quite a bit, we hope in a mostly
compatible fashion.  The main config files are now in xc/config/cf, imake
sources are in xc/config/imake, and makedepend sources are in
xc/config/makedepend.  The lndir program (for creating link trees) is in
xc/config/util; there is a Makefile.ini in that directory that may be useful
to get lndir built the first time (before you build the rest of the tree).

The rules for building libraries have changed a lot; it is now much easier
to add a new library to the system.

The selection of vendor.cf file has moved from Imake.tmpl to a new Imake.cf.

The config variable that was called ServerOSDefines in R5 has been renamed
to ServerExtraDefines, and applies globally to all X server sources.  The
variable ServerOSDefines now applies just to the os directory of the server.

'#' should no longer be thought of as a valid comment character in Imakefiles;
use XCOMM instead.

There are probably lots of new variables (e.g., HasPoll, HasBSD44Sockets,
ThreadedX) and rules (SpecialCObjectRule) of interest, but for now you will
have to browse the config files to ferret them out.

The way libraries get built has changed, the unshared library .o's are now
placed in a subdirectory rather than the shared library .o's.


7. Fresco

Fresco has been mostly integrated into the build process.  The Fresco and Xtf
libraries are found in xc/lib/Fresco and xc/lib/Xtf.  Ixx, dish, and i2mif
have moved to contrib/programs.  The various Fresco example programs have
moved to contrib/examples/Fresco.  Working Imakefiles are provided for almost
all of the utilities and examples.

A demo program (dish) is included that shows how a scripting language (Tcl)
can rather easily be bound to Fresco through the CORBA dynamic invocation
mechanism.  For this reason, a copy of Tcl is included in contrib/lib/tcl.

To build Fresco you must define either HasCplusplus or HasGcc2ForCplusplus in
site.def; you may also have to set CplusplusCmd and/or CplusplusDependIncludes
to invoke the appropriate C++ compiler and find the required header files
during make depend.

While we have integrated Fresco into the build procedure, we have not had the
chance to compile it on many different platforms, or using many different
compilers.  Other members have reported success building Fresco under SGI IRIX
5.1 using SGI C++ 3.2, under Solaris 2.3 using SPARCCompiler C++ 3.0.1, and
under OSF1 on a DEC Alpha using DEC C++.  We hope to have a variety of C++
compilers available soon, and to extend the list of environments in which
Fresco is known to build.


8. XIE (X Image Extension)

The final release from AGE Logic is included in this release, matching the 5.0
protocol.  It is a complete implementation of full XIE, except for the
following techniques that are excluded from the SI:
	ColorAlloc:	Match, Requantize
	Convolve:	Replicate
	Decode:		JPEG lossless
	Encode:		JPEG lossless
	Geometry:	AntialiasByArea, AntialiasByLowpass

xieperf exercises the server functionality; it provides unit testing and a
"reasonable measure" of multi-element photoflo testing.  Many of the tests
have been modified to work on more diverse visuals including 4 bit
PseudoColor, 8 bit GrayScale, 8 and 24 bit DirectColor, as well as 8, 16, and
24 bit TrueColor.  The BandExtract element is used more frequently as it is
better able to cope with the various DirectColor and TrueColor displays.  Some
changes were made in colormap handling to aid in handling of various visuals,
and to correctly free colormap properties.  xieperf is ICCCM compliant -- use
the -WMSafe switch if a window manager is present.

An XIElib specification is still in progress, and is not included in this
release.  The XIElib code matches the 5.0 protocol.

The JPEG compression and decompression code is based on the Independent JPEG
Group's (IJG) JPEG software, Release 4.  This software provides baseline
Huffman DCT encoding as defined by ISO/IEC DIS 10918-1, "Digital Compression
and Coding of Continuous-tone Still Images, Part 1: Requirements and
guidelines", and was chosen as a basis for our implementation of JPEG
compression and decompression primarily because the IJG's design goals matched
ours for the implementation of the XIE SI: achieve portability and flexibility
without sacrificing performance.  Less than half of the files distributed by
the IJG have been incorporated into the XIE SI.  The IJG's software is made
available with restrictions; see xc/programs/Xserver/XIE/mixie/jpeg/README.


9. XKB (X Keyboard extension)

Support for XKB in Xlib is compiled in by default except on the Cray and the
Alpha AXP (the code does not yet work on 64-bit systems).  Support for XKB in
the X server is not compiled in by default.  You can compile it in by setting

#define BuildXKB YES			(for support in the X server)

in the file xc/config/cf/site.def.  Note that enabling XKB in the X server is
a pervasive change; you need to clean the server and rebuild everything if you
change this option.

Turning on XKB in the X server usually requires changes to the vendor ddx
keyboard handling.  We've made a first stab in the svga and dec/ws ddxen, but
they probably aren't correct (since we experience problems here).
  
There are some XKB test programs in contrib/test/Xkb.

The XKB support in Xlib is still at an early stage of formal review, and could
undergo significant change.


10. X Transport Library (xtrans)

The X Transport Library is intended to combine all system and transport
specific code into a single place in the source tree.  This API should be used
by all libraries, clients and servers of the X Window System.  Use of this API
should allow the addition of new types of transports and support for new
platforms without making any changes to the source except in the X Transport
Interface code.

This interface should solve the problem of multiple #ifdef TRANSPORT and
#ifdef PLATFORM statements scattered throughout the source tree.

This interface should provide enough functionality to support all types of
protocols, including connection oriented protocols such as X11 and FS, and
connection-less oriented protocols such as XDMCP.

For R6beta, the following areas have been updated to use xtrans:
	lib/X11 (including the Input Method code)
	lib/ICE
	lib/font/fc
	lib/FS
	XServer/os
	xfs/os

The XDMCP code in xdm and the X server has not been modified to use xtrans.


11. ICE (Inter-Client Exchange)

The ICE library supports the latest versions of the ICE protocol and library
specifications (now in public review), except for the following exceptions:
    - The current implementation does not support multithreading.
    - The library does not yet check for BadLength and BadValue errors.

Support has been added for MIT-MAGIC-COOKIE-1 authentication.

An "iceauth" program was written to manipulate an ICE authority file (very
similar to the "xauth" program).


12. SM (Session Management)

The Session Management library supports the latest versions of the XSMP
protocol and library specifications (now in public review), except for the
following exceptions:
    - The current implementation does not support multithreading.
    - The library does not yet check for BadLength and BadValue errors.

A simple session manager has been developed to test the new Session Management
protocol.  It has been renamed from xpsm in R6alpha to xsm in this release.
At the moment, it does not exercise the complete XSMP protocol and the user
interface is rather simple, but it does have enough functionality to make it
useful.
    - Handles accepting connections from clients
    - Handles graceful or unexpected termination of clients
    - Maintains database of all properties set by clients
    - User interface provides a way to issue checkpoint and shutdown
      messages to clients
    - Manages client interaction with the user
    - Ability to restart clients (clients running on remote machines
      are handled using the new "rstart" protocol - see below)
    - Requires MIT-MAGIC-COOKIE-1 authentication from clients.

A new protocol, rstart, greatly simplifies the task of starting applications
on remote machines.  It is built upon already existing remote execution
protocols (like rsh).  The most important feature that it adds is the ability
to pass environment variables and authentication data to the applications
being started.

xsm needs a bit more work to make it robust, and the user interface can surely
be enhanced.  We have not yet written a proxy for connecting ICCCM 1.0 clients
to the session manager; we expect to have one for the final release.

A sample client (xsmclient) has been written using Smlib.  In the future, it
can be modified to use the Xt support for session management.


13. Xlib

Xlib sources are in xc/lib/X11; we've renamed directories to match the
lib<name>.a names.

Lots of Xlib source files were renamed to fit better on DOS systems.  The "X"
prefix was dropped from most file names, and "CIE" and "TekHVC" prefixes were
dropped.

More work has been done on threads support; it runs robustly on SunOS 5.3, DEC
OSF/1 1.3, Mach 2.5 Vers 2.00.1, AIX 2.3, and Microsoft Windows NT 3.1.  The
Xrm and Context data structures in Xlib are now locked against concurrent
access.  Locking for Xcms and I18N support has not been reviewed.  A version
of ico that can be compiled to use threads is in contrib/programs/ico.  A
possible problem with the DEC scheduler makes high-speed animation
applications run unevenly.

The Display and GC structures have been made opaque to normal application
code; references to private fields will get compiler errors.  You can work
around some of these by compiling with -DXLIB_ILLEGAL_ACCESS, but better to
fix the offending code.

All new i18n code from the i18n-si team is integrated.  A sample input method
server is in contrib/programs/xfeoak, and a sample client is in
contrib/programs/hterm.  An input method server developers kit is in
contrib/lib/IMd.kit.

Support for using poll() rather than select() is implemented, selected by the
HasPoll config option.

The BIG-REQUESTS extension is supported.

A new extension, XC-MISC, allows clients to get back ID ranges from the
server.  Xlib handles this automatically under the covers.  This is useful for
long-running applications that use many IDs over their lifetime.

New functions (see the header files for interfaces):

XInternAtoms, XGetAtomNames
XAddConnectionWatch, XRemoveConnectionWatch, XProcessInternalConnection
XInternalConnectionNumbers
XInitImage, XReadBitmapFileData
XInitThreads, XLockDisplay, XUnlockDisplay
XExtendedMaxRequestSize
XESetBeforeFlush
XConvertCase

Kerberos V5 user-to-user authentication support is fully tested and in regular
use at the X Consortium.  Set the HasKrb5 config variable to YES to enable.


14. Xt

Xt contains new functionality as documented in the public review draft for R6,
with the following exceptions:

  2.4    The XtNsessionID resource is on the ApplicationShell.
  2.5.5  In order to preserve the ability to call out to runtime
         environments that do not provide call-by-value, the parameters
         of type Cardinal in the XtAllocateProc type have been changed
         to pointer to Cardinal.  This interface is under review and may
         change.
  3.4.3  The order of arguments to XtChangeManagedSet has changed.  The
         name of the type of the proc and the order of arguments to the proc
         has changed.
  4.1.2  The new fields in the WMShell instance record appear earlier in
         the record.  The ApplicationShell does not have a session resource;
         session participation support is implemented in the Application
         Shell.
  4.1.3  The ApplicationShell has additional new resources.
         The algorithm for setting the WM_CLIENT_LEADER resource is 
         intentionally implemented differently than stated in the draft spec.
         Also, the SM_CLIENT_ID property is implemented, which is not
         mentioned in the draft specification.
  9.6.1  Two new resource converters are implemented for resources defined
         by the ApplicationShell widget: XtCvtStringToRestartStyle, and,
         a primitive attempt is made for XtCvtStringToStringArray.  
  10.4   XtUninstallAccelerators and XtUninstallAllAccelerators are not
         implemented, and we do not expect to include this functionality in
         the R6 Intrinsics.
  11.13.1 The Hook Object's XtNshells and XtNnumShells resources are not
         yet implemented.  
  14     There is no new Session object.  All session management assistance
         is implemented in the ApplicationShell.  The changes to the 
         interfaces and algorithms described in this chapter will be
         described on the Consortium's intrinsics mailing list.  
         Existing applications with ApplicationShells created through 
         XtAppInitialize, or which have a non-NULL argv resource, will 
         attempt to connect to a session manager if the SESSION_MANAGER
         environment variable is defined. To prevent this behavior, include
                   *joinSession: False
         in your X resource file.
  14.1   XtSessionInitialize is not implemented and not expected in R6.
  14.1.2 XtSessionRequestCheckpoint is not implemented; use
         SmcRequestCheckpoint instead.
  14.1.3 The interface to XtSessionGetToken no longer takes a type.
         The token data structure is smaller; requesting an interact
         is done by registering a callback on the XtNinteractCallback
         list of the ApplicationShell.  
  15.1   XtToolkitThreadIntialize returns Boolean, indicating whether
         it was previously called.  (The use of process locking in the
         implementation is under review and optimizations are expected.)

The Xt implementation allows a configuration choice of poll or select for I/O
multiplexing, selectable at compile time by the HasPoll config option.

The Xt implementation has dependencies on R6 Xlib, specifically:
  Use XInternAtoms instead of multiple XInternAtom calls where possible.
  Input method support (Xlib internal connections).
  Test for the XVisibleHint in the flags of XWMHints.

When linking with Xt, you now need to also link with SMlib and ICElib.  This
is automatic if you use the XTOOLLIB make variable or XawClientLibs imake
variable in your Imakefiles.  The shared library major version number has
been incremented because of binary incompatible changes to Shell.

This implementation no longer allows NULL to be passed as the value in the
name/value pair in a request to XtGetValues.  The default behavior is to print
the error message "NULL ArgVal in XtGetValues" and exit.  To restore bug
compatibility, recompile Resources.c -DGETVALUES_BUG

Motif 1.2 defines the types XtTypedArg and XtTypedArgList in VaSimpleP.h.  To
work around, in Motif VaSimple.c, if IntrinsicP.h is not already included
before VaSimpleP.h, do so.  In VaSimpleP.h, fence off the type declarations
with #if (XT_REVISION < 6) and #endif.


15. Xaw

Moved Clock, Logo, and Mailbox widgets to their respective apps, bumped shared
library major rev because of this.

Text and Panner widget translations augmented to include keypad cursor keysyms
in addition to normal cursor keysyms.

The internationalization support from OMRON is now included.  Xaw uses native
widechar support when available, otherwise it uses the Xlib widechar routines.
Per system specifics are set in XawI18n.h.


16. PEX

PEXlib for PEX 5.1 is included.  The R5 PHIGS library has been moved to
contrib/lib/PHIGS.  The suspex test suite is available in contrib/test/suspex.


17. Fonts

There are three new Chinese bdf fonts in xc/fonts/bdf/misc (gb16fs.bdf,
gb16st.bdf, gb24st.bdf).

Bitmap Charter fonts that are identical to the output generated from the
outline font have been moved to xc/fonts/bdf/unnec_{75,100}dpi.


18. Font library

The XLFD changes for matrix transformations, polymorphism, and charset
subsetting, are implemented.  XLFD changes to charset subsetting voted on by
the fontwork mailing list since R6 alpha have been implemented.

Aliases in a fonts.alias file can allow one scalable alias name to match all
instances of another font.  The "!" character introduces as comment line in
fonts.alias files.


19. Font server

The font server has been renamed from fs to xfs to avoid confusion with
an AFS program.  The default port has changed from 7000 (used by AFS)
to 7100, and has been registered with the Internet Assigned Numbers Authority.


20. X server

X Server Changes from R5 to R6alpha

The server sources have moved to xc/programs/Xserver.  Server-side extension
code exists as subdirectories.  The "ddx" directory is gone; mi, cfb, and mfb
are at the top level, and a "hw" (hardware) subdirectory now exists for
holding vendor-specific ddx code.

Function prototypes have been added to header files in Xserver/include, cfb,
mfb, and os.

Support for pixmap privates has been added.  It is turned off by default, but
can be activated by putting -DPIXPRIV in the ServerExtraDefines parameter in
your vendor.cf file.  See the porting layer document for details.

New screen functions, called primarily by code in window.c, have been added to
make life easier for vendors with multi-layered framebuffers.  Several
functions and some pieces of functions have moved from window.c to miwindow.c.
See the porting layer document for details.  Also, the contents of union
_Validate (validate.h) are now device dependent; mivalidate.h contains a
sample definition.

An implementation of the SYNC extension is in place (Xserver/Xext/sync.c) and
is believed to fully implement the current spec.  As part of this work, client
priorities have also been implemented; see the tail end of WaitForSomething()
in WaitFor.c.  The priority scheme is "strict" in that the client(s) with the
highest priority always runs.  Twm has been modified to provide simple
facilities for setting client priorities.

The server can now fetch font glyphs on demand instead of loading them all at
once.  See xc/programs/Xserver/dix/dixfonts.c, xc/lib/font/fc/fserve.c, and
xc/lib/font/fc/fsconvert.c.  A new X server command line option, -deferglyphs,
controls which types of fonts (8 vs. 16 bit) to demand load; see the X man
page for details.

The os layer now uses sigaction on POSIX systems; a new function OsSignal was
added for convenience, which you should use in your ddx code.

A new timer interface has been added to the os layer; see the functions in
os/WaitFor.c.  This interface is used by XKB, but we haven't tried to use it
anywhere else (like in Xext/sleepuntil.c) yet.

Sun ddx: Expanded device probe table finds multiple frame buffers of the same
type.  Expanded keymap tables provide support for European and Asian
keyboards.  Added per-key autorepeat support.  Considerable cleanup and
duplicate code eliminated.  Deletion of SunView support.  GX source code now
included.

HP ddx: cfb-based sources included as xc/programs/Xserver/hw/hp.

svga ddx: new svga ddx for SVR4 included as xc/programs/Xserver/hw/svga.


X Server Changes from R6alpha to R6beta

Function prototypes for mi have been added.  See the mi header files.

Redundant code for GC funcs was moved from cfbgc.c and mfbgc.c to migc.c.
This file also contains a few utility functions like miComputeCompositeClip,
which replaces the chunk of code that appears near the top of most versions of
ValidateGC.

The cfb and mfb code have been modified to perform 64 bit reads and writes of
the framebuffer on the Alpha AXP.  These modifications should be usable on
other 64 bit architectures as well, though we have not tested it on any
others.  There are a few hacks in dix, notably ProcPutImage and ProcGetImage,
to work around the fact that the protocol doesn't allow you to specify 64 bit
padding.  Note that the server will still not run on a machine that does not
have a 32 bit data type, like a Cray.

Some tweaks to the way that PostChangeSaveUnder is called have been
incorporated.

For performance, all region operations are now invoked via macros which by
default make direct calls to the appropriate mi functions.  You can
conditionally compile them to continue calling through the screen structure.
The following change was made throughout the server:

	(*pScreen->RegionOp)(...) changes to REGION_OP(pScreen, ...);

Some of the trivial region ops have been inlined in the macros.  For
compatibility, the region function pointers remain in the screen structure
even if the server is compiled to make direct calls to mi.  See
include/regionstr.h.

A generic callback manager is included and can be used to add notification
style hooks anywhere in the server.  See dixutils.c.  The callback manager is
now being used to provide notification of when the server is
grabbed/ungrabbed, when a client's state changes, and when an event is sent to
a client.  The latter two are used by the RECORD extension.

A new server, Xvfb uses cfb or mfb code to render into a framebuffer that is
allocated in virtual memory.  See Xserver/hw/vfb.  The framebuffer can be
allocated in "normal" memory, shared memory, or as a memory mapped file.
Xvfb's screen is normally not visible; however, when allocated as a memory
mapped file, xwd can display the screen by specifying the framebuffer file as
its input.

A new option has been added, -config filename.  This lets you put server
options in a file.  See os/utils.c.

Xtrans has been installed into the os layer.  See os/connection.c, io.c, and
transport.c.  As a result, the server now supports the many flavors of SVR4
local connections.

The client structure now has privates like windows, pixmaps, and gcs.  See
include/dixstruct.h, dix/privates.c, and dispatch.c.

An attempt has been made to merge the multi-threaded server source with the
single-threaded source.  The result is in the xc/MTXserver directory.  The
xc/Xserver directory was unaffected by this merge with the exception of the
xc/Xserver/include directory, which both servers currently share.  The
multi-threaded server is not currently functional, and a number of recent
changes made to the single-threaded server have not been folded into the
MTXserver.  Given resource constraints, it is unlikely that there will be much
more progress by the final release, and we might move MTXserver to contrib.


21. LBX (Low Bandwidth X)

The code for the LBX proxy is in xc/programs/lbxproxy.  The X server extension
is in xc/programs/Xserver/lbx.  Code shared by the proxy and server is in
xc/lib/lbxutil.  LBX is turned off by default; set BuildLBX to YES in your
site.cf to enable it.  We were not able to get LBX working in time for beta;
we believe this is due to conflicts between Xtrans integration changes and LBX
integration changes, both of which were put in late in the game and affected
some of the same files in the server's os layer.  NCD does have LBX working in
a pre-Xtrans server.


22. RECORD extension

A version of the extension is included as part of the Xtst library.  The
implementation does not quite match the version 1.2 draft specification, but
the spec is going to change anyway.  The GetConfig request is not fully
implemented.  A test program is in contrib/test/record.


23. xhost

Two new families have been registered: LocalHost, for connections over a
non-network transport, and Krb5Principal, for Kerberos V5 principals.

To distinguish between different host families, a new xhost syntax
"family:name" has been introduced.  Names are as before; families are:

inet:	Internet host
dnet:	DECnet host
nis:	Secure RPC network name
krb:	Kerberos V5 principal
local:	contains only one name, ""

The "old-style" syntax for names is still supported when the name does not
contain a colon.


24. xrdb

A bunch of new symbols are defined to tell you what extensions and visual
classes are available.


25. twm

An interface for setting client priorities with the Sync extension has been
added.  Session support has not yet been added; if someone wants to volunteer
to do this, that would be great.


26. xdm

There is a new resource, choiceTimeout, that controls how long to wait for a
display to respond after the user has selected a host from the chooser.

Support has been added for a modular, dynamically-loaded greeter library.
This feature allows different dynamic libraries to by loaded by xdm at
run-time to provide different login window interfaces without access to the
xdm sources.  It only works on DEC OSF/1.  Perhaps someone from Sun can help
us make it work for their platforms, too.  The name of the greeter library is
controlled by another new resource, greeterLib.

Xdm takes the user's password and gets Kerberos tickets for the session.
Still do be done is to destroy the tickets when the session ends.


26. X Test Suite

The code has been fixed to work on Alpha AXP.  The Xi tests contributed by HP,
and XIM tests contributed by Sun are integrated.


27. ANSIfication

We've changed our sources to stop using the bsd function names index, rindex,
bcopy, bcmp; we now use strchr, strrchr, memcpy/memmove, and memcmp.  We still
use the name bzero (because there is no bsd equivalent for the general case of
memset) but it is translated to memset via a #define in <X11/Xfuncs.h>.  The
bsd function names are still supported in <X11/Xos.h> and <X11/Xfuncs.h>.

Most client-side uses of caddr_t should now be gone from our sources (a result
of building on NT).  Explicit declarations of errno are now only used on
non-ANSI systems.

The libraries use more standard POSIX *_t types.

28. Miscellaneous

A new version of the "patch" program is in xc/util/patch; it understands the
unified diff format produced by GNU diff.
